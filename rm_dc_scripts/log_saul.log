
                           Design Compiler Graphical 
                                 DC Ultra (TM)
                                  DFTMAX (TM)
                              Power Compiler (TM)
                                 DesignWare (R)
                                 DC Expert (TM)
                               Design Vision (TM)
                               HDL Compiler (TM)
                               VHDL Compiler (TM)
                                  DFT Compiler
                               Design Compiler(R)

              Version L-2016.03-SP5-5 for linux64 - Apr 21, 2017 

                    Copyright (c) 1988 - 2017 Synopsys, Inc.
   This software and the associated documentation are proprietary to Synopsys,
 Inc. This software may only be used in accordance with the terms and conditions
 of a written license agreement with Synopsys, Inc. All other use, reproduction,
            or distribution of this software is strictly prohibited.
Initializing...
Initializing gui preferences from file  /home/sara/.synopsys_dv_prefs.tcl
#
# dc_shell -64bit -topo -f ../../script/dc/rm_dc_scripts/dc.tcl | tee -i ../../logs/dc/dc.log
#
source -echo -verbose ../rm_setup/dc_setup.tcl
source -echo -verbose ../rm_setup/common_setup.tcl
puts "RM-Info: Running script [info script]\n"
RM-Info: Running script /home/sara/Documents/Eliseu/treco_saul/rm_setup/common_setup.tcl

##########################################################################################
# Variables common to all reference methodology scripts
# Script: common_setup.tcl
# Version: L-2016.03-SP2 (July 25, 2016)
# Copyright (C) 2007-2016 Synopsys, Inc. All rights reserved.
##########################################################################################
set DESIGN_NAME                   "AntiLog2"; #The name of the top-level design
AntiLog2
set LIB_DATA                      "/usr/local/cmos28fdsoi_24"
/usr/local/cmos28fdsoi_24
set DESIGN_REF_DATA_PATH          ".."  ;
..
##########################################################################################
# Hierarchical Flow Design Variables
##########################################################################################
set HIERARCHICAL_DESIGNS           "" ;# List of hierarchical block design names "DesignA DesignB" ...
set HIERARCHICAL_CELLS             "" ;# List of hierarchical block cell instance names "u_DesignA u_DesignB" ...
##########################################################################################
# Library Setup Variables
##########################################################################################
# For the following variables, use a blank space to separate multiple entries.
# Example: set TARGET_LIBRARY_FILES "lib1.db lib2.db lib3.db"
set ADDITIONAL_SEARCH_PATH        "${DESIGN_REF_DATA_PATH}/";  #  Additional search path to be added to the default search path
../
set TARGET_LIBRARY_FILES           "$LIB_DATA/C28SOI_SC_12_CORE_LL@2.2@20131004.0/libs/C28SOI_SC_12_CORE_LL_ss28_0.80V_0.00V_0.00V_0.00V_125C.db $LIB_DATA/C28SOI_SC_12_CORE_LL@2.2@20131004.0/libs/C28SOI_SC_12_CORE_LL_ss28_0.80V_0.00V_0.00V_0.00V_m40C.db $LIB_DATA/C28SOI_SC_12_CORE_LL@2.2@20131004.0/libs/C28SOI_SC_12_CORE_LL_tt28_0.80V_0.00V_0.00V_0.00V_125C.db $LIB_DATA/C28SOI_SC_12_CORE_LL@2.2@20131004.0/libs/C28SOI_SC_12_CORE_LL_tt28_0.80V_0.00V_0.00V_0.00V_25C.db $LIB_DATA/C28SOI_SC_12_CORE_LL@2.2@20131004.0/libs/C28SOI_SC_12_CORE_LL_ff28_0.80V_0.00V_0.00V_0.00V_125C.db $LIB_DATA/C28SOI_SC_12_CORE_LL@2.2@20131004.0/libs/C28SOI_SC_12_CORE_LL_ff28_0.80V_0.00V_0.00V_0.00V_m40C.db"  ;#  Target technology logical libraries
/usr/local/cmos28fdsoi_24/C28SOI_SC_12_CORE_LL@2.2@20131004.0/libs/C28SOI_SC_12_CORE_LL_ss28_0.80V_0.00V_0.00V_0.00V_125C.db /usr/local/cmos28fdsoi_24/C28SOI_SC_12_CORE_LL@2.2@20131004.0/libs/C28SOI_SC_12_CORE_LL_ss28_0.80V_0.00V_0.00V_0.00V_m40C.db /usr/local/cmos28fdsoi_24/C28SOI_SC_12_CORE_LL@2.2@20131004.0/libs/C28SOI_SC_12_CORE_LL_tt28_0.80V_0.00V_0.00V_0.00V_125C.db /usr/local/cmos28fdsoi_24/C28SOI_SC_12_CORE_LL@2.2@20131004.0/libs/C28SOI_SC_12_CORE_LL_tt28_0.80V_0.00V_0.00V_0.00V_25C.db /usr/local/cmos28fdsoi_24/C28SOI_SC_12_CORE_LL@2.2@20131004.0/libs/C28SOI_SC_12_CORE_LL_ff28_0.80V_0.00V_0.00V_0.00V_125C.db /usr/local/cmos28fdsoi_24/C28SOI_SC_12_CORE_LL@2.2@20131004.0/libs/C28SOI_SC_12_CORE_LL_ff28_0.80V_0.00V_0.00V_0.00V_m40C.db
set ADDITIONAL_LINK_LIB_FILES     ""  ;#  Extra link logical libraries not included in TARGET_LIBRARY_FILES
set MIN_LIBRARY_FILES             ""  ;#  List of max min library pairs "max1 min1 max2 min2 max3 min3"...
set MW_REFERENCE_LIB_DIRS         ""  ;#  Milkyway reference libraries (include IC Compiler ILMs here)
set MW_REFERENCE_CONTROL_FILE     ""  ;#  Reference Control file to define the Milkyway reference libs
set TECH_FILE                     "${LIB_DATA}/SynopsysTechnoKit_cmos028FDSOI_6U1x_2U2x_2T8x_LB@2.1.2@20121128.2/PACKAGING/cmos28lp_6U1x_2U2x_2T8x_LB_16TEG.tf"  ;#  Milkyway technology file
/usr/local/cmos28fdsoi_24/SynopsysTechnoKit_cmos028FDSOI_6U1x_2U2x_2T8x_LB@2.1.2@20121128.2/PACKAGING/cmos28lp_6U1x_2U2x_2T8x_LB_16TEG.tf
set MAP_FILE                      "${LIB_DATA}/C28SOI_SC_12_CORE_LL@2.2@20131004.0/libs/C28SOI_SC_12_CORE_LL.pt.map"  ;	#  Mapping file for TLUplus
/usr/local/cmos28fdsoi_24/C28SOI_SC_12_CORE_LL@2.2@20131004.0/libs/C28SOI_SC_12_CORE_LL.pt.map
set TLUPLUS_MAX_FILE              "${LIB_DATA}/SynopsysTechnoKit_cmos028FDSOI_6U1x_2U2x_2T8x_LB@2.1.2@20121128.2/TLUPLUS/FuncRCmax/tluplus"  ;#  Max TLUplus file
/usr/local/cmos28fdsoi_24/SynopsysTechnoKit_cmos028FDSOI_6U1x_2U2x_2T8x_LB@2.1.2@20121128.2/TLUPLUS/FuncRCmax/tluplus
set TLUPLUS_MIN_FILE              "${LIB_DATA}/SynopsysTechnoKit_cmos028FDSOI_6U1x_2U2x_2T8x_LB@2.1.2@20121128.2/TLUPLUS/FuncRCmin/tluplus"  ;#  Min TLUplus file
/usr/local/cmos28fdsoi_24/SynopsysTechnoKit_cmos028FDSOI_6U1x_2U2x_2T8x_LB@2.1.2@20121128.2/TLUPLUS/FuncRCmin/tluplus
set MIN_ROUTING_LAYER            "M2"   ;	# Min routing layer
M2
set MAX_ROUTING_LAYER            "B2"   ;	# Max routing layer
B2
set LIBRARY_DONT_USE_FILE        ""   ;# Tcl file with library modifications for dont_use
##########################################################################################
# Multivoltage Common Variables
#
# Define the following multivoltage common variables for the reference methodology scripts 
# for multivoltage flows. 
# Use as few or as many of the following definitions as needed by your design.
##########################################################################################
set PD1                          ""           ;# Name of power domain/voltage area  1
set VA1_COORDINATES              {}           ;# Coordinates for voltage area 1
set MW_POWER_NET1                "VDD1"       ;# Power net for voltage area 1
VDD1
puts "RM-Info: Completed script [info script]\n"
RM-Info: Completed script /home/sara/Documents/Eliseu/treco_saul/rm_setup/common_setup.tcl

source -echo -verbose ../rm_setup/dc_setup_filenames.tcl
puts "RM-Info: Running script [info script]\n"
RM-Info: Running script /home/sara/Documents/Eliseu/treco_saul/rm_setup/dc_setup_filenames.tcl

# The following variables are used to be appended to report file names, 
# avoiding overwriting previous files. Agripino.
set YEAR  [clock format [clock seconds] -format "%Y"]
2018
set MONTH [clock format [clock seconds] -format "%m"]
06
set DAY   [clock format [clock seconds] -format "%d"]
28
# The following variables are used by scripts in the rm_dc_scripts folder to direct 
# the location of the output files.
set REPORTS_DIR 	"../reports"
../reports
set CONSTRAINTS_DIR     "../constraints"
../constraints
set RESULTS_DIR 	"../structural"
../structural
set LOGS_DIR 		"../logs"
../logs
set PHYSICAL_DIR 	"../physical"
../physical
set POWER_DIR 		"../power"
../power
set PARASITICS_DIR 	"../parasitics"
../parasitics
set TIMING_DIR 		"../timing"
../timing
file mkdir ${REPORTS_DIR}
file mkdir ${CONSTRAINTS_DIR}
file mkdir ${RESULTS_DIR}
file mkdir ${LOGS_DIR}
file mkdir ${PHYSICAL_DIR}
file mkdir ${POWER_DIR}
file mkdir ${PARASITICS_DIR}
file mkdir ${TIMING_DIR}
file mkdir ${REPORTS_DIR}/dc
file mkdir ${REPORTS_DIR}/fm
file mkdir ${CONSTRAINTS_DIR}/dc
file mkdir ${RESULTS_DIR}/dc
file mkdir ${RESULTS_DIR}/fm
file mkdir ${LOGS_DIR}/dc
file mkdir ${LOGS_DIR}/fm
file mkdir ${PHYSICAL_DIR}/dc
file mkdir ${POWER_DIR}/dc
file mkdir ${PARASITICS_DIR}/dc
file mkdir ${TIMING_DIR}/dc
#################################################################################
# Design Compiler Reference Methodology Filenames Setup
# Script: dc_setup_filenames.tcl
# Version: L-2016.03-SP2 (July 25, 2016)
# Copyright (C) 2010-2016 Synopsys, Inc. All rights reserved.
#################################################################################
#################################################################################
# Use this file to customize the filenames used in the Design Compiler
# Reference Methodology scripts.  This file is designed to be sourced at the
# beginning of the dc_setup.tcl file after sourcing the common_setup.tcl file.
#
# Note that the variables presented in this file depend on the type of flow
# selected when generating the reference methodology files.
#
# Example.
#    If you set DFT flow as FALSE, you will not see DFT related filename
#    variables in this file.
#
# When reusing this file for different flows or newer release, ensure that
# all the required filename variables are defined.  One way to do this is
# to source the default dc_setup_filenames.tcl file and then override the
# default settings as needed for your design.
#
# The default values are backwards compatible with older
# Design Compiler Reference Methodology releases.
#
# Note: Care should be taken when modifying the names of output files
#       that are used in other scripts or tools.
#################################################################################
#################################################################################
# General Flow Files
#################################################################################
##########################
# Milkyway Library Names #
##########################
set DCRM_MW_LIBRARY_NAME                                ${DESIGN_NAME}_LIB
AntiLog2_LIB
set DCRM_FINAL_MW_CEL_NAME                              ${DESIGN_NAME}_DCT
AntiLog2_DCT
###############
# Input Files #
###############
set DCRM_SDC_INPUT_FILE                                 ${CONSTRAINTS_DIR}/${DESIGN_NAME}.sdc
../constraints/AntiLog2.sdc
set DCRM_CONSTRAINTS_INPUT_FILE                         ${CONSTRAINTS_DIR}/${DESIGN_NAME}.tcl
../constraints/AntiLog2.tcl
###########
# Reports #
###########
set DCRM_CHECK_LIBRARY_REPORT                           ${REPORTS_DIR}/dc/${DESIGN_NAME}.check_library.rpt
../reports/dc/AntiLog2.check_library.rpt
set DCRM_CONSISTENCY_CHECK_ENV_FILE                     ${REPORTS_DIR}/dc/${DESIGN_NAME}.compile_ultra.env
../reports/dc/AntiLog2.compile_ultra.env
set DCRM_CHECK_DESIGN_REPORT                            ${REPORTS_DIR}/dc/${DESIGN_NAME}.check_design.rpt
../reports/dc/AntiLog2.check_design.rpt
set DCRM_CHECK_DESIGN_FINAL_REPORT                      ${REPORTS_DIR}/dc/${DESIGN_NAME}.check_design.final.rpt
../reports/dc/AntiLog2.check_design.final.rpt
set DCRM_ANALYZE_DATAPATH_EXTRACTION_REPORT             ${REPORTS_DIR}/dc/${DESIGN_NAME}.analyze_datapath_extraction.rpt
../reports/dc/AntiLog2.analyze_datapath_extraction.rpt
set DCRM_FINAL_QOR_REPORT                               ${REPORTS_DIR}/dc/${DESIGN_NAME}.mapped.qor.rpt
../reports/dc/AntiLog2.mapped.qor.rpt
set DCRM_FINAL_TIMING_REPORT                            ${REPORTS_DIR}/dc/${DESIGN_NAME}.mapped.timing.rpt
../reports/dc/AntiLog2.mapped.timing.rpt
set DCRM_FINAL_AREA_REPORT                              ${REPORTS_DIR}/dc/${DESIGN_NAME}.mapped.area.rpt
../reports/dc/AntiLog2.mapped.area.rpt
set DCRM_FINAL_AREA_HIERARCHY_REPORT                    ${REPORTS_DIR}/dc/${DESIGN_NAME}.mapped.area_hier.rpt
../reports/dc/AntiLog2.mapped.area_hier.rpt
set DCRM_FINAL_POWER_REPORT                             ${REPORTS_DIR}/dc/${DESIGN_NAME}.mapped.power.rpt
../reports/dc/AntiLog2.mapped.power.rpt
set DCRM_FINAL_POWER_HIERARCHY_REPORT                   ${REPORTS_DIR}/dc/${DESIGN_NAME}.mapped.power_hier.rpt
../reports/dc/AntiLog2.mapped.power_hier.rpt
set DCRM_FINAL_CLOCK_GATING_REPORT                      ${REPORTS_DIR}/dc/${DESIGN_NAME}.mapped.clock_gating.rpt
../reports/dc/AntiLog2.mapped.clock_gating.rpt
set DCRM_FINAL_SELF_GATING_REPORT                       ${REPORTS_DIR}/dc/${DESIGN_NAME}.mapped.self_gating.rpt
../reports/dc/AntiLog2.mapped.self_gating.rpt
set DCRM_THRESHOLD_VOLTAGE_GROUP_REPORT                 ${REPORTS_DIR}/dc/${DESIGN_NAME}.mapped.threshold.voltage.group.rpt
../reports/dc/AntiLog2.mapped.threshold.voltage.group.rpt
set DCRM_INSTANTIATE_CLOCK_GATES_REPORT                 ${REPORTS_DIR}/dc/${DESIGN_NAME}.instatiate_clock_gates.rpt
../reports/dc/AntiLog2.instatiate_clock_gates.rpt
set DCRM_MULTIBIT_COMPONENTS_REPORT                     ${REPORTS_DIR}/dc/${DESIGN_NAME}.multibit.components.rpt
../reports/dc/AntiLog2.multibit.components.rpt
set DCRM_MULTIBIT_BANKING_REPORT                        ${REPORTS_DIR}/dc/${DESIGN_NAME}.multibit.banking.rpt
../reports/dc/AntiLog2.multibit.banking.rpt
set DCRM_FINAL_INTERFACE_TIMING_REPORT                  ${REPORTS_DIR}/dc/${DESIGN_NAME}.mapped.interface_timing.rpt
../reports/dc/AntiLog2.mapped.interface_timing.rpt
################
# Output Files #
################
set DCRM_AUTOREAD_RTL_SCRIPT                            ${RESULTS_DIR}/dc/${DESIGN_NAME}.autoread_rtl.tcl
../structural/dc/AntiLog2.autoread_rtl.tcl
set DCRM_ELABORATED_DESIGN_DDC_OUTPUT_FILE              ${RESULTS_DIR}/dc/${DESIGN_NAME}.elab.ddc
../structural/dc/AntiLog2.elab.ddc
set DCRM_ELABORATED_DESIGN_VERILOG_OUTPUT_FILE          ${RESULTS_DIR}/dc/${DESIGN_NAME}.elab.v
../structural/dc/AntiLog2.elab.v
set DCRM_COMPILE_ULTRA_DDC_OUTPUT_FILE                  ${RESULTS_DIR}/dc/${DESIGN_NAME}.compile_ultra.ddc
../structural/dc/AntiLog2.compile_ultra.ddc
set DCRM_FINAL_DDC_OUTPUT_FILE                          ${RESULTS_DIR}/dc/${DESIGN_NAME}.mapped.ddc
../structural/dc/AntiLog2.mapped.ddc
set DCRM_FINAL_PG_VERILOG_OUTPUT_FILE                   ${RESULTS_DIR}/dc/${DESIGN_NAME}.mapped.pg.v
../structural/dc/AntiLog2.mapped.pg.v
set DCRM_FINAL_VERILOG_OUTPUT_FILE                      ${RESULTS_DIR}/dc/${DESIGN_NAME}.mapped.v
../structural/dc/AntiLog2.mapped.v
set DCRM_FINAL_SDC_OUTPUT_FILE                          ${CONSTRAINTS_DIR}/dc/${DESIGN_NAME}.mapped.sdc
../constraints/dc/AntiLog2.mapped.sdc
set DCRM_FINAL_DESIGN_ICC2                              ICC2_files
ICC2_files
# The following procedures are used to control the naming of the updated blocks
# after transparent interface optimization.
# Modify this procedure if you want to use different names.
proc dcrm_compile_ultra_tio_filename { design } {
  return $design.compile_ultra.tio.ddc
}
proc dcrm_mapped_tio_filename { design } {
  return $design.mapped.tio.ddc
}
#################################################################################
# DCT Flow Files
#################################################################################
###################
# DCT Input Files #
###################
set DCRM_DCT_DEF_INPUT_FILE                             ${PHYSICAL_DIR}/${DESIGN_NAME}.def
../physical/AntiLog2.def
set DCRM_DCT_FLOORPLAN_INPUT_FILE                       ${PHYSICAL_DIR}/${DESIGN_NAME}.fp
../physical/AntiLog2.fp
set DCRM_DCT_PHYSICAL_CONSTRAINTS_INPUT_FILE            ${PHYSICAL_DIR}/${DESIGN_NAME}.physical_constraints.tcl
../physical/AntiLog2.physical_constraints.tcl
###############
# DCT Reports #
###############
set DCRM_DCT_PHYSICAL_CONSTRAINTS_REPORT                ${REPORTS_DIR}/dc/${DESIGN_NAME}.physical_constraints.rpt
../reports/dc/AntiLog2.physical_constraints.rpt
set DCRM_DCT_FINAL_CONGESTION_REPORT                    ${REPORTS_DIR}/dc/${DESIGN_NAME}.mapped.congestion.rpt
../reports/dc/AntiLog2.mapped.congestion.rpt
set DCRM_DCT_FINAL_CONGESTION_MAP_OUTPUT_FILE           ${REPORTS_DIR}/dc/${DESIGN_NAME}.mapped.congestion_map.png
../reports/dc/AntiLog2.mapped.congestion_map.png
set DCRM_DCT_FINAL_CONGESTION_MAP_WINDOW_OUTPUT_FILE    ${REPORTS_DIR}/dc/${DESIGN_NAME}.mapped.congestion_map_window.png
../reports/dc/AntiLog2.mapped.congestion_map_window.png
set DCRM_DCT_FINAL_QOR_SNAPSHOT_FOLDER                  ${REPORTS_DIR}/dc/${DESIGN_NAME}.qor_snapshot
../reports/dc/AntiLog2.qor_snapshot
set DCRM_DCT_FINAL_QOR_SNAPSHOT_REPORT                  ${REPORTS_DIR}/dc/${DESIGN_NAME}.qor_snapshot.rpt
../reports/dc/AntiLog2.qor_snapshot.rpt
####################
# DCT Output Files #
####################
set DCRM_DCT_FLOORPLAN_OUTPUT_FILE                      ${PHYSICAL_DIR}/dc/${DESIGN_NAME}.initial.fp
../physical/dc/AntiLog2.initial.fp
set DCRM_DCT_FINAL_FLOORPLAN_OUTPUT_FILE                ${PHYSICAL_DIR}/dc/${DESIGN_NAME}.mapped.fp
../physical/dc/AntiLog2.mapped.fp
set DCRM_DCT_FINAL_SPEF_OUTPUT_FILE                     ${PHYSICAL_DIR}/dc/${DESIGN_NAME}.mapped.spef
../physical/dc/AntiLog2.mapped.spef
set DCRM_DCT_FINAL_SDF_OUTPUT_FILE                      ${PHYSICAL_DIR}/dc/${DESIGN_NAME}.mapped.sdf
../physical/dc/AntiLog2.mapped.sdf
#################################################################################
# DFT Flow Files
#################################################################################
###################
# MV Input Files  #
###################
set DCRM_MV_UPF_INPUT_FILE                              ${POWER_DIR}/${DESIGN_NAME}.upf
../power/AntiLog2.upf
set DCRM_MV_SET_VOLTAGE_INPUT_FILE                      ${POWER_DIR}/${DESIGN_NAME}.set_voltage.tcl
../power/AntiLog2.set_voltage.tcl
#set DCRM_MV_DCT_VOLTAGE_AREA_INPUT_FILE                 ${POWER_DIR}/${DESIGN_NAME}.create_voltage_area.tcl
#set MVRCRM_RTL_READ_SCRIPT                              ${POWER_DIR}/${DESIGN_NAME}.MVRC.read_design.tcl
#set VCLPRM_RTL_READ_SCRIPT                              ${POWER_DIR}/${DESIGN_NAME}.VCLP.read_design.tcl
##############
# MV Reports #
##############
set DCRM_MV_DRC_FINAL_SUMMARY_REPORT                    ${DESIGN_NAME}.mv_drc.final_summary.rpt
AntiLog2.mv_drc.final_summary.rpt
set DCRM_MV_DRC_FINAL_VERBOSE_REPORT                    ${DESIGN_NAME}.mv_drc.final.rpt
AntiLog2.mv_drc.final.rpt
set DCRM_MV_FINAL_POWER_DOMAIN_REPORT                   ${DESIGN_NAME}.mapped.power_domain.rpt
AntiLog2.mapped.power_domain.rpt
set DCRM_MV_FINAL_POWER_SWITCH_REPORT                   ${DESIGN_NAME}.mapped.power_switch.rpt
AntiLog2.mapped.power_switch.rpt
set DCRM_MV_FINAL_SUPPLY_NET_REPORT                     ${DESIGN_NAME}.mapped.supply_net.rpt
AntiLog2.mapped.supply_net.rpt
set DCRM_MV_FINAL_PST_REPORT                            ${DESIGN_NAME}.mapped.pst.rpt
AntiLog2.mapped.pst.rpt
set DCRM_MV_FINAL_LEVEL_SHIFTER_REPORT                  ${DESIGN_NAME}.mapped.level_shifter.rpt
AntiLog2.mapped.level_shifter.rpt
set DCRM_MV_FINAL_ISOLATION_CELL_REPORT                 ${DESIGN_NAME}.mapped.isolation_cell.rpt
AntiLog2.mapped.isolation_cell.rpt
set DCRM_MV_FINAL_RETENTION_CELL_REPORT                 ${DESIGN_NAME}.mapped.retention_cell.rpt
AntiLog2.mapped.retention_cell.rpt
####################
# MV Output Files  #
####################
set DCRM_MV_FINAL_UPF_OUTPUT_FILE                       ${DESIGN_NAME}.supplement.upf
AntiLog2.supplement.upf
set DCRM_MV_FINAL_FULL_UPF_OUTPUT_FILE                  ${DESIGN_NAME}.full.upf
AntiLog2.full.upf
#set DCRM_MV_FINAL_LINK_LIBRARY_OUTPUT_FILE              ${DESIGN_NAME}.link_library.tcl
###################
# DFT Input Files #
###################
set DCRM_DFT_SIGNAL_SETUP_INPUT_FILE                    ${PHYSICAL_DIR}/${DESIGN_NAME}.dft_signal_defs.tcl
../physical/AntiLog2.dft_signal_defs.tcl
set DCRM_DFT_AUTOFIX_CONFIG_INPUT_FILE                  ${PHYSICAL_DIR}/${DESIGN_NAME}.dft_autofix_config.tcl
../physical/AntiLog2.dft_autofix_config.tcl
###############
# DFT Reports #
###############
set DCRM_DFT_DRC_CONFIGURED_VERBOSE_REPORT              ${REPORTS_DIR}/dc/${DESIGN_NAME}.dft_drc_configured.rpt
../reports/dc/AntiLog2.dft_drc_configured.rpt
set DCRM_DFT_SCAN_CONFIGURATION_REPORT                  ${REPORTS_DIR}/dc/${DESIGN_NAME}.scan_config.rpt
../reports/dc/AntiLog2.scan_config.rpt
set DCRM_DFT_COMPRESSION_CONFIGURATION_REPORT           ${REPORTS_DIR}/dc/${DESIGN_NAME}.compression_config.rpt
../reports/dc/AntiLog2.compression_config.rpt
set DCRM_DFT_PREVIEW_CONFIGURATION_REPORT               ${REPORTS_DIR}/dc/${DESIGN_NAME}.report_dft_insertion_config.preview_dft.rpt
../reports/dc/AntiLog2.report_dft_insertion_config.preview_dft.rpt
set DCRM_DFT_PREVIEW_DFT_SUMMARY_REPORT                 ${REPORTS_DIR}/dc/${DESIGN_NAME}.preview_dft_summary.rpt
../reports/dc/AntiLog2.preview_dft_summary.rpt
set DCRM_DFT_PREVIEW_DFT_ALL_REPORT                     ${REPORTS_DIR}/dc/${DESIGN_NAME}.preview_dft.rpt
../reports/dc/AntiLog2.preview_dft.rpt
set DCRM_DFT_FINAL_SCAN_PATH_REPORT                     ${REPORTS_DIR}/dc/${DESIGN_NAME}.mapped.scanpath.rpt
../reports/dc/AntiLog2.mapped.scanpath.rpt
set DCRM_DFT_DRC_FINAL_REPORT                           ${REPORTS_DIR}/dc/${DESIGN_NAME}.mapped.dft_drc_inserted.rpt
../reports/dc/AntiLog2.mapped.dft_drc_inserted.rpt
set DCRM_DFT_FINAL_SCAN_COMPR_SCAN_PATH_REPORT          ${REPORTS_DIR}/dc/${DESIGN_NAME}.mapped.scanpath.scan_compression.rpt
../reports/dc/AntiLog2.mapped.scanpath.scan_compression.rpt
set DCRM_DFT_DRC_FINAL_SCAN_COMPR_REPORT                ${REPORTS_DIR}/dc/${DESIGN_NAME}.mapped.dft_drc_inserted.scan_compression.rpt
../reports/dc/AntiLog2.mapped.dft_drc_inserted.scan_compression.rpt
set DCRM_DFT_FINAL_CHECK_SCAN_DEF_REPORT                ${REPORTS_DIR}/dc/${DESIGN_NAME}.mapped.check_scan_def.rpt
../reports/dc/AntiLog2.mapped.check_scan_def.rpt
set DCRM_DFT_FINAL_DFT_SIGNALS_REPORT                   ${REPORTS_DIR}/dc/${DESIGN_NAME}.mapped.dft_signals.rpt
../reports/dc/AntiLog2.mapped.dft_signals.rpt
####################
# DFT Output Files #
####################
set DCRM_DFT_FINAL_SCANDEF_OUTPUT_FILE                  ${RESULTS_DIR}/dc/${DESIGN_NAME}.mapped.scandef
../structural/dc/AntiLog2.mapped.scandef
set DCRM_DFT_FINAL_EXPANDED_SCANDEF_OUTPUT_FILE         ${RESULTS_DIR}/dc/${DESIGN_NAME}.mapped.expanded.scandef
../structural/dc/AntiLog2.mapped.expanded.scandef
set DCRM_DFT_FINAL_CTL_OUTPUT_FILE                      ${RESULTS_DIR}/dc/${DESIGN_NAME}.mapped.ctl
../structural/dc/AntiLog2.mapped.ctl
set DCRM_DFT_FINAL_PROTOCOL_OUTPUT_FILE                 ${RESULTS_DIR}/dc/${DESIGN_NAME}.mapped.scan.spf
../structural/dc/AntiLog2.mapped.scan.spf
set DCRM_DFT_FINAL_SCAN_COMPR_PROTOCOL_OUTPUT_FILE      ${RESULTS_DIR}/dc/${DESIGN_NAME}.mapped.scancompress.spf
../structural/dc/AntiLog2.mapped.scancompress.spf
set MVRCRM_RTL_READ_SCRIPT                              ${RESULTS_DIR}/dc/${DESIGN_NAME}.MVRC.read_design.tcl
../structural/dc/AntiLog2.MVRC.read_design.tcl
set VCLPRM_RTL_READ_SCRIPT                              ${RESULTS_DIR}/dc/${DESIGN_NAME}.VCLP.read_design.tcl
../structural/dc/AntiLog2.VCLP.read_design.tcl
#################################################################################
# Formality Flow Files
#################################################################################
set DCRM_SVF_OUTPUT_FILE                                ${RESULTS_DIR}/dc/${DESIGN_NAME}.mapped.svf
../structural/dc/AntiLog2.mapped.svf
set FMRM_UNMATCHED_POINTS_REPORT                        ${REPORTS_DIR}/fm/${DESIGN_NAME}.fmv_unmatched_points.rpt
../reports/fm/AntiLog2.fmv_unmatched_points.rpt
set FMRM_FAILING_SESSION_NAME                           ${DESIGN_NAME}
AntiLog2
set FMRM_FAILING_POINTS_REPORT                          ${REPORTS_DIR}/fm/${DESIGN_NAME}.fmv_failing_points.rpt
../reports/fm/AntiLog2.fmv_failing_points.rpt
set FMRM_ABORTED_POINTS_REPORT                          ${REPORTS_DIR}/fm/${DESIGN_NAME}.fmv_aborted_points.rpt
../reports/fm/AntiLog2.fmv_aborted_points.rpt
set FMRM_ANALYZE_POINTS_REPORT                          ${REPORTS_DIR}/fm/${DESIGN_NAME}.fmv_analyze_points.rpt
../reports/fm/AntiLog2.fmv_analyze_points.rpt
puts "RM-Info: Completed script [info script]\n"
RM-Info: Completed script /home/sara/Documents/Eliseu/treco_saul/rm_setup/dc_setup_filenames.tcl

puts "RM-Info: Running script [info script]\n"
RM-Info: Running script /home/sara/Documents/Eliseu/treco_saul/rm_setup/dc_setup.tcl

#################################################################################
# Design Compiler Reference Methodology Setup for Hierarchical Flow
# Script: dc_setup.tcl
# Version: L-2016.03-SP2 (July 25, 2016)
# Copyright (C) 2007-2016 Synopsys, Inc. All rights reserved.
#################################################################################
##########################################################################################
# Hierarchical Flow Blocks
#
# If you are performing a hierarchical flow, define the hierarchical designs here.
# List the reference names of the hierarchical blocks.  Cell instance names will
# be automatically derived from the design names provided.
#
# Note: These designs are expected to be unique. There should not be multiple
#       instantiations of physical hierarchical blocks.
#
##########################################################################################
# Each of the hierarchical designs specified in ${HIERARCHICAL_DESIGNS} in the common_setup.tcl file
# should be added to only one of the lists below:
set synth_dft false
false
set DDC_HIER_DESIGNS                    ""  ;# List of Design Compiler hierarchical design names (.ddc will be read)
set DC_BLOCK_ABSTRACTION_DESIGNS        ""  ;# List of Design Compiler block abstraction hierarchical designs (.ddc will be read)
# without transparent interface optimization
set DC_BLOCK_ABSTRACTION_DESIGNS_TIO    ""  ;# List of Design Compiler block abstraction hierarchical designs
# with transparent interface optimization
set ICC_BLOCK_ABSTRACTION_DESIGNS       ""  ;# List of IC Compiler block abstraction hierarchical design names (Milkyway will be read)
#################################################################################
# Setup Variables
#
# Modify settings in this section to customize your Design Compiler Reference 
# Methodology run.
# Portions of dc_setup.tcl may be used by other tools so program name checks
# are performed where necessary.
#################################################################################
# The following setting removes new variable info messages from the end of the log file
set_app_var sh_new_variable_message false
false
if {$synopsys_program_name == "dc_shell"}  {

  #################################################################################
  # Design Compiler Setup Variables
  #################################################################################

  # Use the set_host_options command to enable multicore optimization to improve runtime.
  # This feature has special usage and license requirements.  Refer to the 
  # "Support for Multicore Technology" section in the Design Compiler User Guide
  # for multicore usage guidelines.
  # Note: This is a DC Ultra feature and is not supported in DC Expert.

  set_host_options -max_cores 8

  # Change alib_library_analysis_path to point to a central cache of analyzed libraries
  # to save runtime and disk space.  The following setting only reflects the
  # default value and should be changed to a central location for best results.

  set_app_var alib_library_analysis_path .
### ADDED FROM DSP_PD
  # In cases where RTL has VHDL generate loops or SystemVerilog structs, switching 
  # activity annotation from SAIF may be rejected, the following variable setting 
  # improves SAIF annotation, by making sure that synthesis object names follow same 
  # naming convention as used by RTL simulation. 

  set_app_var hdlin_enable_upf_compatible_naming true
  
  # Enable the Golden UPF mode to use same originla UPF script file throughout the synthesis,
  # physical implementation, and verification flow.

  set_app_var enable_golden_upf true

  # By default the tool will create supply set handles. If your UPF has domain dependent
  # supply nets, please uncomment the following line:

  set_app_var upf_create_implicit_supply_sets false
### ADDED FROM DSP_PD
  # Add any additional Design Compiler variables needed here

}
false
# Note: When autoread is used ${RTL_SOURCE_FILES} can include a list of
#       both directories and files.
set RTL_SOURCE_FILES  "$DESIGN_REF_DATA_PATH/fast_antilog/trunk/AntiLog2.v "      ; # Enter the list of source RTL files if reading from RTL
../fast_antilog/trunk/AntiLog2.v 
#################################################################################
# Search Path Setup
#
# Set up the search path to find the libraries and design files.
#################################################################################
# For a hierarchical flow, add the block-level results directories to the
# search path to find the block-level design files.
#  set HIER_DESIGNS "${DDC_HIER_DESIGNS} ${DC_BLOCK_ABSTRACTION_DESIGNS} ${DC_BLOCK_ABSTRACTION_DESIGNS_TIO}"
#  foreach design $HIER_DESIGNS {
#  }
#################################################################################
# Library Setup
#
# This section is designed to work with the settings from common_setup.tcl
# without any additional modification.
#################################################################################
# Milkyway variable settings
# Make sure to define the Milkyway library variable
# mw_design_library, it is needed by write_milkyway command
set mw_reference_library ${MW_REFERENCE_LIB_DIRS}
set mw_design_library ${DCRM_MW_LIBRARY_NAME}
AntiLog2_LIB
set mw_site_name_mapping { {CORE unit} {Core unit} {core unit} }
 {CORE unit} {Core unit} {core unit} 
# The remainder of the setup below should only be performed in Design Compiler
if {$synopsys_program_name == "dc_shell"}  {

  set_app_var target_library ${TARGET_LIBRARY_FILES}
  set_app_var synthetic_library dw_foundation.sldb
  set_app_var link_library "* $target_library $ADDITIONAL_LINK_LIB_FILES $synthetic_library"

  # Set min libraries if they exist
  foreach {max_library min_library} $MIN_LIBRARY_FILES {
    set_min_library $max_library -min_version $min_library
  }

  # Set the variable to use Verilog libraries for Test Design Rule Checking
  # (See dc.tcl for details)

  # set_app_var test_simulation_library <list of Verilog library files>

  if {[shell_is_in_topographical_mode]} {

    # To activate the extended layer mode to support 4095 layers uncomment the extend_mw_layers command 
    # before creating the Milkyway library. The extended layer mode is permanent and cannot be reverted 
    # back to the 255 layer mode once activated.

    extend_mw_layers

    # Only create new Milkyway design library if it doesn't already exist
    if {![file isdirectory $mw_design_library ]} {
      create_mw_lib   -technology $TECH_FILE                       -mw_reference_library $mw_reference_library                       $mw_design_library
    } else {
      # If Milkyway design library already exists, ensure that it is consistent with specified Milkyway reference libraries
      set_mw_lib_reference $mw_design_library -mw_reference_library $mw_reference_library
    }

    open_mw_lib     $mw_design_library

### ADDED FROM DSP_PD
    set_check_library_options -upf 
    check_library > ${DCRM_CHECK_LIBRARY_REPORT}

    set_tlu_plus_files -max_tluplus $TLUPLUS_MAX_FILE                        -min_tluplus $TLUPLUS_MIN_FILE                        -tech2itf_map $MAP_FILE

    check_tlu_plus_files
  }

  #################################################################################
  # Library Modifications
  #
  # Apply library modifications after the libraries are loaded.
  #################################################################################

  if {[file exists [which ${LIBRARY_DONT_USE_FILE}]]} {
    puts "RM-Info: Sourcing script file [which ${LIBRARY_DONT_USE_FILE}]\n"
    source -echo -verbose ${LIBRARY_DONT_USE_FILE}
  }
}
puts "RM-Info: Completed script [info script]\n"
RM-Info: Completed script /home/sara/Documents/Eliseu/treco_saul/rm_setup/dc_setup.tcl

#################################################################################
# Design Compiler Block-Level Reference Methodology Script for Hierarchical Flow
# Script: dc.tcl
# Version: L-2016.03-SP2 (July 25, 2016)
# Copyright (C) 2007-2016 Synopsys, Inc. All rights reserved.
#################################################################################
### ADDED FROM DSP_PD
# Note: UPF mode is on by default from Design Compiler B-2008.09 version
###ANTif {![shell_is_in_upf_mode]} {
###ANT  puts "RM-Error: dc_shell must be run in UPF Mode for MV UPF support."
###ANT  exit 1
###ANT}
### ADDED FROM DSP_PD
#################################################################################
# Additional Variables
#
# Add any additional variables needed for your flow here.
#################################################################################
set_app_var auto_insert_level_shifters_on_clocks all
all
set hdlin_enable_elaborate_ref_linking true
true
set dc_allow_rtl_pg true
true
set initial_runtime [clock seconds]
1530230124
################################################################################
# You can enable inference of multibit registers from the buses defined in the RTL.
# The replacement of single-bit cells with multibit library cells occurs during execution 
# of the compile_ultra command. This variable has to be set before reading the RTL
#
# set_app_var hdlin_infer_multibit default_all
#################################################################################
# No additional flow variables are being recommended
#################################################################################
# Setup for Formality Verification
#################################################################################
# In the event of an inconclusive (or hard) verification, we recommend using
# the set_verification_priority commands provided from the analyze_points command
# in Formality. The set_verification_priority commands target specific
# operators to reduce verification complexity while minimizing QoR impact.
# The set_verification_priority commands should be applied after the design
# is read and elaborated.
# For designs that don't have tight QoR constraints and don't have register retiming,
# you can use the following variable to enable the highest productivity single pass flow.
# This flow modifies the optimizations to make verification easier.
# This variable setting should be applied prior to reading in the RTL for the design.
# set_app_var simplified_verification_mode true
# For more information about facilitating formal verification in the flow, refer
# to the following SolvNet article:
# "Resolving Inconclusive and Hard Verifications in Design Compiler"
# https://solvnet.synopsys.com/retrieve/033140.html
# Define the verification setup file for Formality
set_svf ${DCRM_SVF_OUTPUT_FILE}
1
#################################################################################
# Setup SAIF Name Mapping Database
#
# Include an RTL SAIF for better power optimization and analysis.
#
# saif_map should be issued prior to RTL elaboration to create a name mapping
# database for better annotation.
################################################################################
# saif_map -start
#################################################################################
# Read in the RTL Design
#
# Read in the RTL source files or read in the elaborated design (.ddc).
#################################################################################
set WORK_DIR "./WORK"
./WORK
file mkdir ${WORK_DIR}
define_design_lib WORK -path ${WORK_DIR}
1
# Modify the following autoread defaults if desired
#set_app_var hdlin_autoread_verilog_extensions       ".v"; 
#set_app_var hdlin_autoread_sverilog_extensions      ".sv .sverilog"; 
#set_app_var hdlin_autoread_vhdl_extensions          ".vhd .vhdl";
# Note: When autoread is used ${RTL_SOURCE_FILES} can include a list of
#       both directories and files.
#
#       To build designs with interface ports a strimeline wrapper need 
#       to be use to specify interface information and correctly build 
#       the interface ports and set the correct design name. 
#       Use SCRIPT or SVERILOG option for "RTL Source Format" to generate
#       a set of script capable to synthesize these kind of design, using
#       could make Formality verification to fail since the Formality
#       output script will include the wrapper design.
#       For more informacion how to write the wrapper design refer to the 
#       following solvnet article:
#       "Building SystemVerilog Designs Using a Bottom-Up Approach"
#       https://solvnet.synopsys.com/retrieve/039318.html
analyze -autoread         -rebuild         -recursive         -top ${DESIGN_NAME}         -output_script ${DCRM_AUTOREAD_RTL_SCRIPT}         ${RTL_SOURCE_FILES}
== ANALYZE autoread for top design 'AntiLog2' ==

Starting ANALYZE autoread mode...
Information: Adding '/home/sara/Documents/Eliseu/treco_saul/fast_antilog/trunk/AntiLog2.v'.  (AUTOREAD-100)
Information: Scanning file { AntiLog2.v }. (AUTOREAD-303)
Creating script file ../structural/dc/AntiLog2.autoread_rtl.tcl
Compiling source file /home/sara/Documents/Eliseu/treco_saul/fast_antilog/trunk/AntiLog2.v
Presto compilation completed successfully.
Autoread command completed successfully.
1
elaborate ${DESIGN_NAME}
Loading db file '/usr/local/cmos28fdsoi_24/C28SOI_SC_12_CORE_LL@2.2@20131004.0/libs/C28SOI_SC_12_CORE_LL_ss28_0.80V_0.00V_0.00V_0.00V_125C.db'
Loading db file '/usr/local/cmos28fdsoi_24/C28SOI_SC_12_CORE_LL@2.2@20131004.0/libs/C28SOI_SC_12_CORE_LL_ss28_0.80V_0.00V_0.00V_0.00V_m40C.db'
Loading db file '/usr/local/cmos28fdsoi_24/C28SOI_SC_12_CORE_LL@2.2@20131004.0/libs/C28SOI_SC_12_CORE_LL_tt28_0.80V_0.00V_0.00V_0.00V_125C.db'
Loading db file '/usr/local/cmos28fdsoi_24/C28SOI_SC_12_CORE_LL@2.2@20131004.0/libs/C28SOI_SC_12_CORE_LL_tt28_0.80V_0.00V_0.00V_0.00V_25C.db'
Loading db file '/usr/local/cmos28fdsoi_24/C28SOI_SC_12_CORE_LL@2.2@20131004.0/libs/C28SOI_SC_12_CORE_LL_ff28_0.80V_0.00V_0.00V_0.00V_125C.db'
Loading db file '/usr/local/cmos28fdsoi_24/C28SOI_SC_12_CORE_LL@2.2@20131004.0/libs/C28SOI_SC_12_CORE_LL_ff28_0.80V_0.00V_0.00V_0.00V_m40C.db'
Loading db file '/usr/local/synopsys/syn/L-2016.03-SP5-5/libraries/syn/dw_foundation.sldb'
Loading db file '/usr/local/synopsys/syn/L-2016.03-SP5-5/libraries/syn/gtech.db'
Loading db file '/usr/local/synopsys/syn/L-2016.03-SP5-5/libraries/syn/standard.sldb'
  Loading link library 'C28SOI_SC_12_CORE_LL'
  Loading link library 'C28SOI_SC_12_CORE_LL'
  Loading link library 'C28SOI_SC_12_CORE_LL'
  Loading link library 'C28SOI_SC_12_CORE_LL'
  Loading link library 'C28SOI_SC_12_CORE_LL'
  Loading link library 'C28SOI_SC_12_CORE_LL'
  Loading link library 'gtech'
Running PRESTO HDLC

Statistics for case statements in always block at line 40 in file
	'/home/sara/Documents/Eliseu/treco_saul/fast_antilog/trunk/AntiLog2.v'
===============================================
|           Line           |  full/ parallel  |
===============================================
|            41            |    auto/auto     |
===============================================

Inferred memory devices in process
	in routine AntiLog2 line 29 in file
		'/home/sara/Documents/Eliseu/treco_saul/fast_antilog/trunk/AntiLog2.v'.
===============================================================================
|    Register Name    |   Type    | Width | Bus | MB | AR | AS | SR | SS | ST |
===============================================================================
|  barrelshfcnt_reg   | Flip-flop |   4   |  Y  | N  | N  | N  | N  | N  | N  |
|      DOUT_reg       | Flip-flop |  24   |  Y  | N  | N  | N  | N  | N  | N  |
===============================================================================

Inferred memory devices in process
	in routine AntiLog2 line 40 in file
		'/home/sara/Documents/Eliseu/treco_saul/fast_antilog/trunk/AntiLog2.v'.
===============================================================================
|    Register Name    |   Type    | Width | Bus | MB | AR | AS | SR | SS | ST |
===============================================================================
|     LUTout_reg      | Flip-flop |  23   |  Y  | N  | N  | N  | N  | N  | N  |
===============================================================================
Presto compilation completed successfully.
Elaborated 1 design.
Current design is now 'AntiLog2'.
1
## Linking to 
link

  Linking design 'AntiLog2'
  Using the following designs and libraries:
  --------------------------------------------------------------------------
  AntiLog2                    /home/sara/Documents/Eliseu/treco_saul/rm_dc_scripts/AntiLog2.db
  C28SOI_SC_12_CORE_LL (library) /usr/local/cmos28fdsoi_24/C28SOI_SC_12_CORE_LL@2.2@20131004.0/libs/C28SOI_SC_12_CORE_LL_ss28_0.80V_0.00V_0.00V_0.00V_125C.db
  C28SOI_SC_12_CORE_LL (library) /usr/local/cmos28fdsoi_24/C28SOI_SC_12_CORE_LL@2.2@20131004.0/libs/C28SOI_SC_12_CORE_LL_ss28_0.80V_0.00V_0.00V_0.00V_m40C.db
  C28SOI_SC_12_CORE_LL (library) /usr/local/cmos28fdsoi_24/C28SOI_SC_12_CORE_LL@2.2@20131004.0/libs/C28SOI_SC_12_CORE_LL_tt28_0.80V_0.00V_0.00V_0.00V_125C.db
  C28SOI_SC_12_CORE_LL (library) /usr/local/cmos28fdsoi_24/C28SOI_SC_12_CORE_LL@2.2@20131004.0/libs/C28SOI_SC_12_CORE_LL_tt28_0.80V_0.00V_0.00V_0.00V_25C.db
  C28SOI_SC_12_CORE_LL (library) /usr/local/cmos28fdsoi_24/C28SOI_SC_12_CORE_LL@2.2@20131004.0/libs/C28SOI_SC_12_CORE_LL_ff28_0.80V_0.00V_0.00V_0.00V_125C.db
  C28SOI_SC_12_CORE_LL (library) /usr/local/cmos28fdsoi_24/C28SOI_SC_12_CORE_LL@2.2@20131004.0/libs/C28SOI_SC_12_CORE_LL_ff28_0.80V_0.00V_0.00V_0.00V_m40C.db
  dw_foundation.sldb (library) /usr/local/synopsys/syn/L-2016.03-SP5-5/libraries/syn/dw_foundation.sldb

1
# OR
# You can read an elaborated design from the same release.
# Using an elaborated design from an older release will not give the best results.
# read_ddc ${DCRM_ELABORATED_DESIGN_DDC_OUTPUT_FILE}
write -hierarchy -format ddc -output ${DCRM_ELABORATED_DESIGN_DDC_OUTPUT_FILE}
Writing ddc file '../structural/dc/AntiLog2.elab.ddc'.
1
write -hierarchy -format verilog -output ${DCRM_ELABORATED_DESIGN_VERILOG_OUTPUT_FILE}
Writing verilog file '/home/sara/Documents/Eliseu/treco_saul/structural/dc/AntiLog2.elab.v'.
Warning: Verilog writer has added 15 nets to module AntiLog2 using SYNOPSYS_UNCONNECTED_ as prefix.  Please use the change_names command to make the correct changes before invoking the verilog writer.  (VO-11)
Warning: Module AntiLog2 contains unmapped components.  The output netlist might not be read back into the system. (VO-12)
1
### ADDED FROM DSP_PD
#################################################################################
# Load UPF MV Setup
#
# golden.upf, a UPF template file, can be used as a reference to develop a UPF-based
# low power intent file.
#
# You can also use Visual UPF in Design Vision to generate a UPF template for
# your design. To open the Visual UPF dialog box, choose Power > Visual UPF.
# For information about Visual UPF, see the Power Compiler User Guide.
#
# If the UPF file cannot be loaded, do not proceed with the flow.
# The UPF file is required to continue successfully.
#
# Note: load_upf does not support the $search_path variable.
#       Include the relative or absolute path to the UPF file.
#
#################################################################################
###ANTset upf_create_implicit_supply_sets false
# Exit immediately if the UPF file is not found
###ANTif {![load_upf -strict_check true ${DCRM_MV_UPF_INPUT_FILE}]} {
###ANT  puts "RM-Error: Unable to load UPF file ${DCRM_MV_UPF_INPUT_FILE}"
###ANT  exit 1
###ANT}
# For DC Explorer tool a modified version of the input UPF file is created, 
# ${DCRM_MV_UPF_INPUT_FILE}.de_upf_rtl. This files contains the original 
# minimal UPF information including the additional strategies derived 
# by the tool.
###ANTif {[shell_is_in_exploration_mode]} {
###ANT  generate_rtl_upf -path ${POWER_DIR} 
###ANT}
### ADDED FROM DSP_PD
#################################################################################
# Apply Logical Design Constraints
#################################################################################
# You can use either SDC file ${DCRM_SDC_INPUT_FILE} or Tcl file 
# ${DCRM_CONSTRAINTS_INPUT_FILE} to constrain your design.
if {[file exists [which ${DCRM_SDC_INPUT_FILE}]]} {
  puts "RM-Info: Reading SDC file [which ${DCRM_SDC_INPUT_FILE}]\n"
  read_sdc ${DCRM_SDC_INPUT_FILE}
}
Warning: File '../constraints/AntiLog2.sdc' was not found in search path. (CMD-030)
if {[file exists [which ${DCRM_CONSTRAINTS_INPUT_FILE}]]} {
  puts "RM-Info: Sourcing script file [which ${DCRM_CONSTRAINTS_INPUT_FILE}]\n"
  source -echo -verbose ${DCRM_CONSTRAINTS_INPUT_FILE}
}
Warning: File '../constraints/AntiLog2.tcl' was not found in search path. (CMD-030)
# You can enable analysis and optimization for multiple clocks per register.
# To use this, you must constrain to remove false interactions between mutually exclusive
# clocks.  This is needed to prevent unnecessary analysis that can result in
# a significant runtime increase with this feature enabled.
#
# set_clock_groups -physically_exclusive | -logically_exclusive | -asynchronous #                  -group {CLKA, CLKB} -group {CLKC, CLKD} 
#
#set_app_var timing_enable_multiple_clocks_per_reg true
#################################################################################
# Apply The Operating Conditions
#################################################################################
# Set operating condition on top level
# set_operating_conditions -max <max_opcond> -min <min_opcond>
### ADDED FROM DSP_PD
# Set operating condition on top level
###ANTset_operating_conditions -max {ss28_0.80V_0.00V_0.00V_0.00V_m40C}
set_operating_conditions -max {ss28_0.80V_0.00V_0.00V_0.00V_125C}
Using operating conditions 'ss28_0.80V_0.00V_0.00V_0.00V_125C' found in library 'C28SOI_SC_12_CORE_LL'.
1
#set_operating_conditions -max {ss_cworst_0p765v_1p40v_0c}
#set_operating_conditions -max {ss_0p765v_0p765v_0c}
#################################################################################
# Define Operating Voltages on Power Nets
#################################################################################
# Important Note: set_related_supply net settings should now be included in the
#                 RTL UPF otherwise Formality verification will fail.
# Create a file with the "set_voltage" commands for your design.
# Example: set_voltage 1.08 -object_list [list TOP.primary.power LEON3_p0.primary.power]  
###ANTif {[file exists [which ${DCRM_MV_SET_VOLTAGE_INPUT_FILE}]]} {
###ANT  puts "RM-Info: Sourcing script file [which ${DCRM_MV_SET_VOLTAGE_INPUT_FILE}]\n"
###ANT  source -echo -verbose ${DCRM_MV_SET_VOLTAGE_INPUT_FILE}
###ANT}
# set_voltage commands will be written out in SDC version 1.8 and might
# be defined as a part of the SDC for your design.
###ANTcheck_mv_design -verbose
#return
###ANTreport_power_domain [get_power_domains * -hierarchical]
###ANTreport_supply_net [get_supply_nets *]
###ANTreport_isolation_cell -domain [get_power_domains * -hierarchical]
###ANTreport_power_switch [get_power_switches * -hierarchical]
# Check and exit if any supply nets are missing a defined voltage.
###ANTif {![check_mv_design -power_nets]} {
###ANT  puts "RM-Error: One or more supply nets are missing a defined voltage.  Use the set_voltage command to set the appropriate voltage upon the supply."
###ANT  puts "This script will now exit."
###ANT  exit 1
###ANT}
### ADDED FROM DSP_PD
#################################################################################
# Create Default Path Groups
#
# Separating these paths can help improve optimization.
# Remove these path group settings if user path groups have already been defined.
#################################################################################
set ports_clock_root [filter_collection [get_attribute [get_clocks] sources] object_class==port]
Warning: Can't find clocks matching '*' in design 'AntiLog2'. (UID-95)
group_path -name REGOUT -to [all_outputs] 
1
group_path -name REGIN -from [remove_from_collection [all_inputs] ${ports_clock_root}] 
1
group_path -name FEEDTHROUGH -from [remove_from_collection [all_inputs] ${ports_clock_root}] -to [all_outputs]
1
group_path -name REG2REG -from [all_registers] -to [all_registers]
Information: Checking out the license 'DesignWare'. (SEC-104)
Information: Changed wire load model for 'alt1' from '(none)' to 'wl_zero'. (OPT-170)
Information: Changed wire load model for 'astr' from '(none)' to 'wl_zero'. (OPT-170)
1
#################################################################################
# Power Optimization Section
#################################################################################
#############################################################################
# Clock Gating Setup
#############################################################################
# If your design has instantiated clock gates, you should use identify_clock_gating
# command to identify and the report_clock_gating -multi_stage to report them.
# identify_clock_gating
# report_clock_gating -multi_stage -nosplit > ${DCRM_INSTANTIATE_CLOCK_GATES_REPORT}
# If you do not want clock-gating to optimize your user instantiated
# clock-gating cells, you should set the pwr_preserve_cg attribute upon
# those clock-gating cells.
# set_preserve_clock_gating [get_cell <user_clock_gating_cells>]
# Default clock_gating_style suits most designs.  Change only if necessary.
# set_clock_gating_style -positive_edge_logic {integrated} -negative_edge_logic {integrated} -control_point before ...   
# Clock gate insertion is now performed during compile_ultra -gate_clock
# so insert_clock_gating is no longer recommended at this step.
# The following setting can be used to enable global clock gating.
# With global clock gating, common enables are extracted across hierarchies
# which results in fewer redundant clock gates. 
#set compile_clock_gating_through_hierarchy true 
# For better timing optimization of enable logic, clock latency for 
# clock gating cells can be optionally specified.
# set_clock_gate_latency -clock <clock_name> -stage <stage_num>     #         -fanout_latency {fanout_range1 latency_val1 fanout_range2 latency_val2 ...}
# You can use "set_self_gating_options" command to specify self-gating 
# options when -self_gating option is used in addition to -gate_clock 
# option at the compile_ultra command. To inserts self-gate on clock-gated
# registers, uncomment the following line:
# set_self_gating_options -interaction_with_clock_gating insert
#############################################################################
# Apply Power Optimization Constraints
#############################################################################
# Include a SAIF file, if possible, for power optimization.  If a SAIF file
# is not provided, the default toggle rate of 0.1 will be used for propagating
# switching activity.
# read_saif -auto_map_names -input ${DESIGN_NAME}.saif -instance < DESIGN_INSTANCE > -verbose
if {[shell_is_in_topographical_mode]} {
      # For multi-Vth design, replace the following to set the threshold voltage groups in the libraries.

      # set_attribute <my_hvt_lib> default_threshold_voltage_group HVT -type string
      # set_attribute <my_lvt_lib> default_threshold_voltage_group LVT -type string
    }
# Starting in J-2014.09, leakage optimization is the default flow and is always enabled.
if {[shell_is_in_topographical_mode]} {
      # Use the following command to enable power prediction using clock tree estimation.

      # set_power_prediction true -ct_references <LIB CELL LIST>
    }
if {[shell_is_in_topographical_mode]} {

  ##################################################################################
  # Apply Physical Design Constraints
  #
  # Optional: Floorplan information can be read in here if available.
  # This is highly recommended for irregular floorplans.
  #
  # Floorplan constraints can be provided from one of the following sources:
  # * extract_physical_constraints with a DEF file
  #	* read_floorplan with a floorplan file (written by write_floorplan)
  #	* User generated Tcl physical constraints
  #
  ##################################################################################

  # Specify ignored layers for routing to improve correlation
  # Use the same ignored layers that will be used during place and route

  if { ${MIN_ROUTING_LAYER} != ""} {
    set_ignored_layers -min_routing_layer ${MIN_ROUTING_LAYER}
  }
  if { ${MAX_ROUTING_LAYER} != ""} {
    set_ignored_layers -max_routing_layer ${MAX_ROUTING_LAYER}
  }

  report_ignored_layers

  # If the macro names change after mapping and writing out the design due to
  # ungrouping or Verilog change_names renaming, it may be necessary to translate 
  # the names to correspond to the cell names that exist before compile.

  # Note: The floorplan files from IC Compiler are named ${DESIGN_NAME}.DCT.def and ${DESIGN_NAME}.DCT.fp.
  #       You should choose your floorplan file and name it to ${DESIGN_NAME}.def
  #       or ${DESIGN_NAME}.fp for Design Compiler use.

  # During DEF constraint extraction, extract_physical_constraints automatically
  # matches DEF names back to precompile names in memory using standard matching rules.
  # read_floorplan will also automatically perform this name matching.

  # Modify set_query_rules if other characters are used for hierarchy separators
  # or bus names. 

  # set_query_rules  -hierarchical_separators {/ _ .}   #                  -bus_name_notations {[] __ ()}     #                  -class {cell pin port net}         #                  -wildcard                          #                  -regsub_cumulative                 #                  -show

  ## For DEF floorplan input

  # The DEF file for Design Compiler Topographical can be written from IC Compiler using the following 
  # recommended options:
  # icc_shell> write_def -version 5.7 -rows_tracks_gcells -fixed -pins -blockages -specialnets   #                      -vias -regions_groups -verbose -output ${DCRM_DCT_DEF_INPUT_FILE}

  if {[file exists [which ${DCRM_DCT_DEF_INPUT_FILE}]]} {
    # If you have physical only cells as a part of your floorplan DEF file, you can use
    # the -allow_physical_cells option with extract_physical_constraints to include
    # the physical only cells as a part of the floorplan in Design Compiler to improve correlation.
    #
    # Note: With -allow_physical_cells, new logical cells in the DEF file
    #       that have a fixed location will also be added to the design in memory.
    #       See the extract_physical_constraints manpage for more information about
    #       identifying the cells added to the design when using -allow_physical_cells.
  
    # extract_physical_constraints -allow_physical_cells ${DCRM_DCT_DEF_INPUT_FILE}

    puts "RM-Info: Reading in DEF file [which ${DCRM_DCT_DEF_INPUT_FILE}]\n"
    extract_physical_constraints ${DCRM_DCT_DEF_INPUT_FILE}
  }
  
  # OR

  ## For floorplan file input

  # The floorplan file for Design Compiler Topographical can be written from IC Compiler using the following 
  # recommended options:
  # Note: IC Compiler requires the use of -placement {terminal} with -create_terminal beginning in the
  #       D-2010.03-SP1 release.
  # icc_shell> write_floorplan -placement {io terminal hard_macro soft_macro} -create_terminal   #                            -row -create_bound -preroute -track ${DCRM_DCT_FLOORPLAN_INPUT_FILE}

  # Read in the secondary floorplan file, previously written by write_floorplan in Design Compiler,
  # to restore physical-only objects back to the design, before reading the main floorplan file.

  if {[file exists [which ${DCRM_DCT_FLOORPLAN_INPUT_FILE}.objects]]} {
    puts "RM-Info: Reading in secondary floorplan file [which ${DCRM_DCT_FLOORPLAN_INPUT_FILE}.objects]\n"
    read_floorplan ${DCRM_DCT_FLOORPLAN_INPUT_FILE}.objects
  }

  if {[file exists [which ${DCRM_DCT_FLOORPLAN_INPUT_FILE}]]} {
    puts "RM-Info: Reading in floorplan file [which ${DCRM_DCT_FLOORPLAN_INPUT_FILE}]\n"
    read_floorplan ${DCRM_DCT_FLOORPLAN_INPUT_FILE}
  }

  # OR

  ## For Tcl file input

  # For Tcl constraints, the name matching feature must be explicitly enabled
  # and will also use the set_query_rules setttings. This should be turned off
  # after the constraint read in order to minimize runtime.

  if {[file exists [which ${DCRM_DCT_PHYSICAL_CONSTRAINTS_INPUT_FILE}]]} {
    set_app_var enable_rule_based_query true
    puts "RM-Info: Sourcing script file [which ${DCRM_DCT_PHYSICAL_CONSTRAINTS_INPUT_FILE}]\n"
    source -echo -verbose ${DCRM_DCT_PHYSICAL_CONSTRAINTS_INPUT_FILE}
    set_app_var enable_rule_based_query false 
  }


  # Use write_floorplan to save the applied floorplan.

  # Note: A secondary floorplan file ${DCRM_DCT_FLOORPLAN_OUTPUT_FILE}.objects
  #       might also be written to capture physical-only objects in the design.
  #       This file should be read in before reading the main floorplan file.

  write_floorplan -all ${DCRM_DCT_FLOORPLAN_OUTPUT_FILE}

  # Verify that all the desired physical constraints have been applied
  # Add the -pre_route option to include pre-routes in the report
  report_physical_constraints > ${DCRM_DCT_PHYSICAL_CONSTRAINTS_REPORT}
}
#################################################################################
# Apply Additional Optimization Constraints
#################################################################################
# Prevent assignment statements in the Verilog netlist.
set_fix_multiple_port_nets -all -buffer_constants
1
set verilogout_no_tri true
true
#################################################################################
# Save the compile environment snapshot for the Consistency Checker utility.
#
# This utility checks for inconsistent settings between Design Compiler and
# IC Compiler which can contribute to correlation mismatches.
#
# Download this utility from SolvNet.  See the following SolvNet article for
# complete details:
#
# https://solvnet.synopsys.com/retrieve/026366.html
#
# The article is titled: "Using the Consistency Checker to Automatically Compare
# Environment Settings Between Design Compiler and IC Compiler"
#################################################################################
# Uncomment the following to snapshot the environment for the Consistency Checker
# write_environment -consistency -output ${DCRM_CONSISTENCY_CHECK_ENV_FILE}
#################################################################################
# Check for Design Problems 
#################################################################################
# Check the current design for consistency
check_design -summary
 
****************************************
check_design summary:
Version:     L-2016.03-SP5-5
Date:        Thu Jun 28 20:55:29 2018
****************************************

                   Name                                            Total
--------------------------------------------------------------------------------
Nets                                                               15
    Unloaded nets (LINT-2)                                         15
--------------------------------------------------------------------------------

Information: Use the 'check_design' command for 
	 more information about warnings. (LINT-98)

1
check_design > ${DCRM_CHECK_DESIGN_REPORT}
# The analyze_datapath_extraction command can help you to analyze why certain data 
# paths are no extracted, uncomment the following line to report analyisis.
# analyze_datapath_extraction > ${DCRM_ANALYZE_DATAPATH_EXTRACTION_REPORT}
check_timing > ${REPORTS_DIR}/dc/${DESIGN_NAME}.elab.check_timing.rpt
#################################################################################
# Multibit Register Reports pre-compile_ultra
#################################################################################
#################################################################################
# Uncomment the next line to verify that the desired bussed registers are grouped as multibit components 
# These multibit components are mapped to multibit registers during compile_ultra
#
# redirect ${DCRM_MULTIBIT_COMPONENTS_REPORT} {report_multibit -hierarchy }
#################################################################################
#################################################################################
# Compile the Design
#
# Recommended Options:
#
#     -scan
#     -gate_clock (-self_gating)
#     -retime
#     -spg
#
# Use compile_ultra as your starting point. For test-ready compile, include
# the -scan option with the first compile and any subsequent compiles.
#
# Use -gate_clock to insert clock-gating logic during optimization.  This
# is now the recommended methodology for clock gating.
#
# Use -self_gating option in addition to -gate_clock for potentially saving 
# additional dynamic power, in topographical mode only. Registers that are 
# not clock gated will be considered for XOR self gating.
# XOR self gating should be performed along with clock gating, using -gate_clock
# and -self_gating options. XOR self gates will be inserted only if there is 
# potential power saving without degrading the timing.
# An accurate switching activity annotation either by reading in a saif 
# file or through set_switching_activity command is recommended.
# You can use "set_self_gating_options" command to specify self-gating 
# options.
#
# Use -retime to enable adaptive retiming optimization for further timing benefit.
#
# Use the -spg option to enable Design Compiler Graphical physical guidance flow.
# The physical guidance flow improves QoR, area and timing correlation, and congestion.
# It also improves place_opt runtime in IC Compiler.
#
# Note: In addition to -spg option you can enable the support of via resistance for 
#       RC estimation to improve the timing correlation with IC Compiler by using the 
#       following setting:
#
#       set_app_var spg_enable_via_resistance_support true
#
# You can selectively enable or disable the congestion optimization on parts of 
# the design by using the set_congestion_optimization command.
# This option requires a license for Design Compiler Graphical.
#
# The constant propagation is enabled when boundary optimization is disabled. In 
# order to stop constant propagation you can do the following
#
# set_compile_directives -constant_propagation false <object_list>
#
# Note: Layer optimization is on by default in Design Compiler Graphical, to 
#       improve the the accuracy of certain net delay during optimization.
#       To disable the the automatic layer optimization you can use the 
#       -no_auto_layer_optimization option.
#
#################################################################################
if {[shell_is_in_topographical_mode]} {
  # Use the "-check_only" option of "compile_ultra" to verify that your
  # libraries and design are complete and that optimization will not fail
  # in topographical mode.  Use the same options as will be used in compile_ultra.

  # compile_ultra -scan -gate_clock -check_only
}
#set ungroup_insts "Inst_digi/DUT_tx Inst_digi/DUT_rx"
#ungroup $ungroup_insts
#compile_ultra -gate_clock -no_autoungroup
set_dynamic_optimization true
1
if (${synth_dft}) {
    compile_ultra -scan -gate_clock
} else {
#    compile_ultra -gate_clock
    compile_ultra
}
Information: Performing power optimization. (PWR-850)
Alib files are up-to-date.
Information: Running optimization using a maximum of 8 cores. (OPT-1500)
Information: Evaluating DesignWare library utilization. (UISN-27)

============================================================================
| DesignWare Building Block Library  |         Version         | Available |
============================================================================
| Basic DW Building Blocks           | L-2016.03-DWBB_201603.5.1
                                                               |     *     |
| Licensed DW Building Blocks        | L-2016.03-DWBB_201603.5.1
                                                               |     *     |
============================================================================

Information: Sequential output inversion is enabled.  SVF file must be used for formal verification. (OPT-1208)

Information: There are 15 potential problems in your design. Please run 'check_design' for more information. (LINT-99)

  Simplifying Design 'AntiLog2'

Loaded alib file './alib-52/C28SOI_SC_12_CORE_LL_ss28_0.80V_0.00V_0.00V_0.00V_125C.db.alib'
Loaded alib file './alib-52/C28SOI_SC_12_CORE_LL_ss28_0.80V_0.00V_0.00V_0.00V_m40C.db.alib'
Loaded alib file './alib-52/C28SOI_SC_12_CORE_LL_tt28_0.80V_0.00V_0.00V_0.00V_125C.db.alib'
Loaded alib file './alib-52/C28SOI_SC_12_CORE_LL_tt28_0.80V_0.00V_0.00V_0.00V_25C.db.alib'
Loaded alib file './alib-52/C28SOI_SC_12_CORE_LL_ff28_0.80V_0.00V_0.00V_0.00V_125C.db.alib'
Loaded alib file './alib-52/C28SOI_SC_12_CORE_LL_ff28_0.80V_0.00V_0.00V_0.00V_m40C.db.alib'
Warning: Operating condition ss28_0.80V_0.00V_0.00V_0.00V_125C set on design AntiLog2 has different process,
voltage and temperatures parameters than the parameters at which target library 
C28SOI_SC_12_CORE_LL is characterized. Delays may be inaccurate as a result. (OPT-998)
  Building model 'DW01_NAND2'
Information: Ungrouping 0 of 1 hierarchies before Pass 1 (OPT-775)
Information: State dependent leakage is now switched from on to off.

  Beginning Pass 1 Mapping
  ------------------------
  Processing 'AntiLog2'
 Implement Synthetic for 'AntiLog2'.
Information: Added key list 'DesignWare' to design 'AntiLog2'. (DDB-72)

  Updating timing information
Information: Updating design information... (UID-85)

  Beginning Mapping Optimizations  (Ultra High effort)
  -------------------------------

  Beginning Constant Register Removal
  -----------------------------------

  Beginning Global Optimizations
  ------------------------------
  Numerical Synthesis (Phase 1)
  Numerical Synthesis (Phase 2)
  Global Optimization (Phase 1)
  Global Optimization (Phase 2)
  Global Optimization (Phase 3)
  Global Optimization (Phase 4)
  Global Optimization (Phase 5)
  Global Optimization (Phase 6)
  Global Optimization (Phase 7)
  Global Optimization (Phase 8)
  Global Optimization (Phase 9)
  Global Optimization (Phase 10)
  Global Optimization (Phase 11)
  Global Optimization (Phase 12)
  Global Optimization (Phase 13)
  Global Optimization (Phase 14)
  Global Optimization (Phase 15)
  Global Optimization (Phase 16)
  Global Optimization (Phase 17)
  Global Optimization (Phase 18)
  Global Optimization (Phase 19)
  Global Optimization (Phase 20)
  Global Optimization (Phase 21)
  Global Optimization (Phase 22)
  Global Optimization (Phase 23)
  Global Optimization (Phase 24)
  Global Optimization (Phase 25)
  Global Optimization (Phase 26)
  Global Optimization (Phase 27)
  Global Optimization (Phase 28)

  Beginning Isolate Ports
  -----------------------

  Beginning Delay Optimization
  ----------------------------

                                  TOTAL                                                
   ELAPSED            WORST NEG   SETUP    DESIGN                              LEAKAGE 
    TIME      AREA      SLACK     COST    RULE COST         ENDPOINT            POWER  
  --------- --------- --------- --------- --------- ------------------------- ---------
    0:00:15     391.0      0.00       0.0       0.0                              0.0276
    0:00:15     391.0      0.00       0.0       0.0                              0.0276
    0:00:15     391.0      0.00       0.0       0.0                              0.0276
    0:00:15     391.0      0.00       0.0       0.0                              0.0276

  Beginning WLM Backend Optimization
  --------------------------------------
    0:00:15     390.5      0.00       0.0       0.0                              0.0276
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271


  Beginning Power Optimization
  ----------------------------

                                  TOTAL                                                
   ELAPSED            WORST NEG   SETUP    DESIGN                              LEAKAGE 
    TIME      AREA      SLACK     COST    RULE COST         ENDPOINT            POWER  
  --------- --------- --------- --------- --------- ------------------------- ---------
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
  Global Optimization (Phase 29)
  Global Optimization (Phase 30)
  Global Optimization (Phase 31)
  Global Optimization (Phase 32)
  Global Optimization (Phase 33)
  Global Optimization (Phase 34)
  Global Optimization (Phase 35)
  Global Optimization (Phase 36)
  Global Optimization (Phase 37)
  Global Optimization (Phase 38)
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271

                                  TOTAL                                                
   ELAPSED            WORST NEG   SETUP    DESIGN                              LEAKAGE 
    TIME      AREA      SLACK     COST    RULE COST         ENDPOINT            POWER  
  --------- --------- --------- --------- --------- ------------------------- ---------
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:15     390.2      0.00       0.0       0.0                              0.0271
    0:00:16     390.2      0.00       0.0       0.0                              0.0271
    0:00:16     390.2      0.00       0.0       0.0                              0.0271
    0:00:16     390.2      0.00       0.0       0.0                              0.0271
    0:00:16     390.2      0.00       0.0       0.0                              0.0271
    0:00:16     390.2      0.00       0.0       0.0                              0.0271
Loading db file '/usr/local/cmos28fdsoi_24/C28SOI_SC_12_CORE_LL@2.2@20131004.0/libs/C28SOI_SC_12_CORE_LL_ss28_0.80V_0.00V_0.00V_0.00V_125C.db'
Loading db file '/usr/local/cmos28fdsoi_24/C28SOI_SC_12_CORE_LL@2.2@20131004.0/libs/C28SOI_SC_12_CORE_LL_ss28_0.80V_0.00V_0.00V_0.00V_m40C.db'
Loading db file '/usr/local/cmos28fdsoi_24/C28SOI_SC_12_CORE_LL@2.2@20131004.0/libs/C28SOI_SC_12_CORE_LL_tt28_0.80V_0.00V_0.00V_0.00V_125C.db'
Loading db file '/usr/local/cmos28fdsoi_24/C28SOI_SC_12_CORE_LL@2.2@20131004.0/libs/C28SOI_SC_12_CORE_LL_tt28_0.80V_0.00V_0.00V_0.00V_25C.db'
Loading db file '/usr/local/cmos28fdsoi_24/C28SOI_SC_12_CORE_LL@2.2@20131004.0/libs/C28SOI_SC_12_CORE_LL_ff28_0.80V_0.00V_0.00V_0.00V_125C.db'
Loading db file '/usr/local/cmos28fdsoi_24/C28SOI_SC_12_CORE_LL@2.2@20131004.0/libs/C28SOI_SC_12_CORE_LL_ff28_0.80V_0.00V_0.00V_0.00V_m40C.db'


Note: Symbol # after min delay cost means estimated hold TNS across all active scenarios 


  Optimization Complete
  ---------------------
Information: State dependent leakage is now switched from off to on.
Information: Propagating switching activity (low effort zero delay simulation). (PWR-6)
Warning: There is no defined clock in the design. (PWR-80)
1
#################################################################################
# Save Design after First Compile
#################################################################################
write -format ddc -hierarchy -output ${DCRM_COMPILE_ULTRA_DDC_OUTPUT_FILE}
Writing ddc file '../structural/dc/AntiLog2.compile_ultra.ddc'.
1
if (${synth_dft}) {
#################################################################################
# DFT Compiler Optimization Section
#################################################################################

    #############################################################################
    # Verilog Libraries for Test Design Rule Checking
    #############################################################################

    # For complex cells that do not have functional models in .lib format,
    # you can supply a list of TetraMAX-compatible Verilog libraries 
    # for test design rule checking.
    # Set the following variable in the dc_setup.tcl file:
    
    # set_app_var test_simulation_library <list of Verilog library files>

    #############################################################################
    # DFT Signal Type Definitions
    #
    # These are design-specific settings that should be modified.
    # The following are only examples and should not be used.
    #############################################################################

    # Define all global DFT signals in this section. If you define any Top-down DFT partitions, 
    # specify DFT signals in the DFT partitions section.
    # It is recommended that top-level test ports be defined as a part of the
    # RTL design and included in the netlist for floorplanning.

    # If you create test ports here and they are not in your floorplan, you should use
    # create_terminal for these additional test ports for topographical mode synthesis.

    if {[shell_is_in_topographical_mode]} {
      # create_terminal -layer "layer_name" -bounding_box {x1 y1 x2 y2} -port ScanPortName ... (repeat for each new test port)
    }

    # If you are using the internal pins flow, it is recommended to run the
    # change_names command before set_dft_signal to avoid problems after DFT insertion.
    # In this case, set_dft_signal pins should be based on pin names after change_names.
    #   -  Use the "-view existing_dft" for already connected DFT signals which must be 
    #      understood for the design to pass "dft_drc".
    #   -  Use the "-view spec" for DFT signals that DFT Compiler will use during
    #      "insert_dft" when making new scan connections.

    # change_names -rules verilog -hierarchy

    # set_dft_signal -view spec -type ScanDataOut -port SO
    # set_dft_signal -view spec -type ScanDataIn -port SI
    # set_dft_signal -view spec -type ScanEnable -port SCAN_ENABLE
    # set_dft_signal -view existing_dft -type ScanClock -port [list CLK] -timing {45 55}
    # set_dft_signal -view existing_dft -type Reset -port RESET -active 0

    puts "RM-Info: Sourcing script file [which ${DCRM_DFT_SIGNAL_SETUP_INPUT_FILE}]\n"
    source -echo -verbose ${DCRM_DFT_SIGNAL_SETUP_INPUT_FILE}

    #############################################################################
    # DFT for Clock Gating
    #
    # This section includes variables and commands used only when clock gating
    # has been performed in the design.
    #############################################################################

    # Use the following command to initialize clock gating cells for test that are
    # made transparent with a signal held constant for testing, e.g. of type 'Constant'.
    # The value set depends on the hierarchy depth of the clock-gating cells.
    # This setting is not needed where clock-gating cells are controlled with scan enable.

    # set_dft_drc_configuration -clock_gating_init_cycles 1

    # To specify a dedicated ScanEnable/TestMode signal to be used for clock gating,
    # use the "-usage clock_gating" option of the "set_dft_signal" command

    # set_dft_signal -view spec -type <ScanEnable|TestMode> -port <dedicated port> -usage clock_gating

    # You can specify the clock-gating connectivity of the ScanEnable/TestMode signals
    # after they are predefined with set_dft_signal -usage clock_gating

    # set_dft_connect <LABEL> -type clock_gating_control -source <DFT signal> [-target ...]

    #############################################################################
    # DFT Configuration
    #############################################################################

    # Preserve the design name when writing to the database during DFT insertion. 
    set_dft_insertion_configuration -preserve_design_name true

    # Do not perform synthesis optimization during DFT insertion. 
    set_dft_insertion_configuration -synthesis_optimization none

    # Multibit cell handling
    # Specify -preserve_multibit_segment to false to treat the cells inside a
    # multibit component as discrete sequential cells. This improves balancing
    # of scan chains.
    # Starting I-2013.12 release, the default setting is false
    # set_scan_configuration -preserve_multibit_segment false

    ## DFT Clock Mixing Specification
    # For a hierarchical flow, don't mix clocks at the block level:
    set_scan_configuration -clock_mixing no_mix

    # For a top-down methodology, clock mixing is recommended, if possible:
    # set_scan_configuration -clock_mixing mix_clocks

    #############################################################################
    # DFT AutoFix Configuration
    #############################################################################

    # Please refer to the DFT Compiler, DFTMAX, and DFTMAX Ultra User Guide, Chapter 12,
    # "Advanced DFT Architecture Methodologies", "Using AutoFix" section.

    # Please refer to the dc.dft_autofix_config.tcl file included with the
    # Design Compiler Reference Methodology scripts for an example of a
    # design-specific AutoFix configuration.

    # Create a design-specific Autofix configuration file and uncomment the
    # following line to source this file.

    # source -echo -verbose ${DCRM_DFT_AUTOFIX_CONFIG_INPUT_FILE}

    #############################################################################
    # DFTMAX Compression Configuration 
    #############################################################################

    # Starting with Reference Methodology Scripts version G-2012.06
    # DFTMAX Compression is enabled in the default flow configuration.

    # For bottom-up flows, we recommend you only insert scan chains at the block level,
    # and insert a DFTMAX codec at the top level.
    # Be sure to insert a large number of short scan chains at the block level.
    #
    # However if you choose to insert DFTMAX Compression at the block level, then
    # uncomment the following command, and then use DFTMAX Hybrid flow at the top 
    # level if you have any uncompressed blocks and want to insert DFTMAX codec 
    # at the top level, or choose DFTMAX HASS Integration flow if you do not have 
    # any uncompressed blocks and do not want to insert a DFTMAX codec at the top level.

    # set_dft_configuration -scan_compression enable

    # DFTMAX Compression Options:
    # 
    #  -min_power true
    #     This specifies that compressor inputs are to be gated for functional power
    #     saving. 
    #     It also reduces glitching during functional and capture operations
    #     Default for -min_power option is false. Recommend that you set this to
    #     true. 
    #
    #  -xtolerance: value is set to tool default. 
    #     Specify "high" to generate DFTMAX compression architecture that has 100% X-tolerance.
    #
    #  -minimum_compression: tool default is a target compression ratio of 10,
    #
    #  -location <compressor_decompressor_location>
    #      Specifies the instance name in which the compressor and decompressor 
    #      will be instantiated.
    #      The default location is the top level of the current design.
    # 
    # For details on these and other DFTMAX compression options, please refer to the
    # DFT Compiler, DFTMAX, and DFTMAX Ultra User Guide, Chapter 18, "Using DFTMAX Compression"
    # and Chapter 20, "Managing X Values in Scan Compression".
     
    set_scan_compression_configuration -xtolerance high -min_power true;

    # Use the following to define the test-mode signal to be used for DFTMAX  
    # compression. Ensure that that test mode signals to be used for clockgating have 
    # been configured with set_dft_signal -usage clock_gating.

    # set_dft_signal -view spec -type TestMode -port scan_compression_enable

    #############################################################################
    # DFT Pipelined Scan Data Configuration
    #############################################################################

   # Use set_pipeline_scan_data_configuration to control how Pipelined Scan Data Registers
   # should be inserted

   # We recommend that you use the head_scan_flop true option to create head pipeline registers that 
   # hold their state during the capture cycle. 
   # You should also constrain ScanEnable to its inactive value during capture in ScanCompression modes


   # Note: if you select the head_scan_flop true option, you can share the scan clock with the head_pipeline_clock. 
   #  If you do not select head_scan_flop true option, then you must use a dedicated head pipeline clock.


    # Options:
    #  -head_scan_flop true
    #  -head_pipeline_clock  <name of clock for head pipeline registers>
    #  -tail_pipeline_clock  <name of clock for tail pipeline registers>
    #  -head_pipeline_stages <desired number of head pipeline stages>
    #  -tail_pipeline_stages <desired number of tail pipeline stages>

    # Example:

    # set_pipeline_scan_data_configuration -head_pipeline_clock <clock_name>     #   -tail_pipeline_clock <clock_name>     #   -head_scan_flop true     #   -head_pipeline_stages <x>     #   -tail_pipeline_stages <y>
    #############################################################################
    # DFT Additional Setup
    #############################################################################

    # Add any additional design-specific DFT constraints here

    #############################################################################
    # Defining Multiple Test modes
    #############################################################################
    
    # Use the define_test_mode command to define additional test modes that you wish to build.
    #
    # If you have enabled DFTMAX or DFTMAX Ultra Compression, the tool will build two test modes by 
    # default: ScanCompression_mode and Internal_scan. 
    #
    # If you wish to override the default test modes, you need to define the purpose of that test mode, 
    # then use the -base_mode and -test_mode options of set_scan_compression_configuration or 
    # set_streaming_compression_configuration command to define the correspondence between the two modes.
    #  
    # Design Compiler shell switches to that test mode after a define_test_mode command.
    #
    # To define DFT signals or scan configuration for a particular test mode, specify -test_mode option 
    # for each modes that you have defined.
    #  
    # At top level, use define_test_mode -target to specify the block level test mode that should be active in 
    # that mode. Please refer to the DFT Compiler, DFTMAX, and DFTMAX Ultra User Guide Chapter 18, 
    # "Using DFTMAX Compression", "DFTMAX Scan Compression and Multiple Test Modes" section.
    #
    # Block level Example with DFTMAX Compression:
    # Defining the test modes at block level
    # define_test_mode MY_internal_scan -usage scan 
    # define_test_mode MY_compression -usage scan_compression
    # 
    # Specifying the DFT signals for each mode using the -test_mode option:
    # set_dft_signal -port scan_input_port_1  -type ScanDataIn  -view spec -test_mode MY_internal_scan
    # set_dft_signal -port scan_input_port_1  -type ScanDataIn  -view spec -test_mode MY_compression
    # set_dft_signal -port scan_output_port_1 -type ScanDataOut -view spec -test_mode MY_internal_scan
    # set_dft_signal -port scan_output_port_1 -type ScanDataOut -view spec -test_mode MY_compression
    #
    # Specifying the scan configuration for each test mode:
    # set_scan_configuration -chain_count <scan mode chain count> -test_mode MY_internal_scan
    # set_scan_configuration -chain_count <compression mode chain count> -test_mode MY_compression
    #
    # Specify the correspondence between user-defined internal scan mode and user-defined compression mode
    # set_scan_compression_configuration -chain_count <compression mode chain count>  -base_mode MY_internal_scan -test_mode MY_compression

    # Top level example with DFTMAX Compression:
    # define_test_mode MY_top_internal_scan -usage scan -target [list core1:MY_internal_scan core2:MY_internal_scan top]
    # define_test_mode MY_top_compression -usage scan_compression -target [list core1:MY_compression core2:MY_compression top]
    #
    ###########################################################################
    # Defining DFT partitions
    ###########################################################################
    # Use the define_dft_partition command to define a set of clock domains, design references,
    # hierarchical cells, or sequential leaf cells that you can specify scan and compression configuration.
    # Then use the current_dft_partition command to set the current partition, then apply one or more
    # supported test configuration commands to configure scan for that partition.
    # Define any partition specific DFT signals in this section.
    #
    # Be sure to define any global scan and compression configuration and signals before define_dft_partition command.
    #
    # Please refer to the DFT Compiler, DFTMAX, and DFTMAX Ultra User Guide, Chapter 18,
    # "Using DFTMAX Compression", "Top-Down Flat Compressed Scan Flow with Partitions" section.
    #
    # define_dft_partition <partition_1>           #   -include <list_of_cells_or_references>     #   -clocks  <list of_clocks>
    #
    # define_dft_partition <partition_2>           #   -include <list_of_cells_or_references>     #   -clocks  <list of_clocks>
    #
    # current_dft_partition <partition_1>
    # <Scan and Compression configuration for partition_1>
    # If you have defined multiple test modes, you must use -test_mode option when defining DFT signals.
    # <DFT signals specific to partition_1>
    #
    # current_dft_partition <partition_2>
    # <Scan and Compression configuration for partition_2>
    # If you have defined multiple test modes, you must use -test_mode option when defining DFT signals.
    # <DFT signals specific to partition_2>
    
    #############################################################################
    # DFT Test Protocol Creation
    #############################################################################

    create_test_protocol

    #############################################################################
    # DFT Insertion
    #############################################################################

    # Use the -verbose version of dft_drc to assist in debugging if necessary
    
    dft_drc                                
    dft_drc -verbose                           > ${DCRM_DFT_DRC_CONFIGURED_VERBOSE_REPORT}
    report_scan_configuration                  > ${DCRM_DFT_SCAN_CONFIGURATION_REPORT}
    report_scan_compression_configuration      > ${DCRM_DFT_COMPRESSION_CONFIGURATION_REPORT}
    report_dft_insertion_configuration         > ${DCRM_DFT_PREVIEW_CONFIGURATION_REPORT}

    # Use the -show all version to preview_dft for more detailed report
    preview_dft                                > ${DCRM_DFT_PREVIEW_DFT_SUMMARY_REPORT}
    preview_dft -show all -test_points all     > ${DCRM_DFT_PREVIEW_DFT_ALL_REPORT}

    insert_dft

    #################################################################################
    # Re-create Default Path Groups
    #
    # In case of ports being created during insert_dft they need to be added
    # to those path groups.
    # Separating these paths can help improve optimization.
    #################################################################################
    
    set ports_clock_root [filter_collection [get_attribute [get_clocks] sources] object_class==port]
    group_path -name REGOUT -to [all_outputs]
    group_path -name REGIN -from [remove_from_collection [all_inputs] ${ports_clock_root}]
    group_path -name FEEDTHROUGH -from [remove_from_collection [all_inputs] ${ports_clock_root}] -to [all_outputs]

    #########################################################################
    # Incremental compile is required if netlist and/or constraints are 
    #changed after first compile
    # Example: DFT insertion, Placement aware multibit banking etc.       
    # Incremental compile is also recommended for final QoR signoff as well
    #########################################################################   

}
#################################################################################
# High-effort area optimization
#
# optimize_netlist -area command, was introduced in I-2013.12 release to improve
# area of gate-level netlists. The command performs monotonic gate-to-gate 
# optimization on mapped designs, thus improving area without degrading timing or
# leakage. 
#################################################################################
optimize_netlist -area
Information: Performing power optimization. (PWR-850)
Alib files are up-to-date.
Information: Running optimization using a maximum of 8 cores. (OPT-1500)

Loaded alib file './alib-52/C28SOI_SC_12_CORE_LL_ss28_0.80V_0.00V_0.00V_0.00V_125C.db.alib'
Loaded alib file './alib-52/C28SOI_SC_12_CORE_LL_ss28_0.80V_0.00V_0.00V_0.00V_m40C.db.alib'
Loaded alib file './alib-52/C28SOI_SC_12_CORE_LL_tt28_0.80V_0.00V_0.00V_0.00V_125C.db.alib'
Loaded alib file './alib-52/C28SOI_SC_12_CORE_LL_tt28_0.80V_0.00V_0.00V_0.00V_25C.db.alib'
Loaded alib file './alib-52/C28SOI_SC_12_CORE_LL_ff28_0.80V_0.00V_0.00V_0.00V_125C.db.alib'
Loaded alib file './alib-52/C28SOI_SC_12_CORE_LL_ff28_0.80V_0.00V_0.00V_0.00V_m40C.db.alib'
Warning: Operating condition ss28_0.80V_0.00V_0.00V_0.00V_125C set on design AntiLog2 has different process,
voltage and temperatures parameters than the parameters at which target library 
C28SOI_SC_12_CORE_LL is characterized. Delays may be inaccurate as a result. (OPT-998)

  Updating timing information
Information: Updating design information... (UID-85)


  Beginning Area Optimization
  -----------------------------

                                  TOTAL                                                
   ELAPSED            WORST NEG   SETUP    DESIGN                              LEAKAGE 
    TIME      AREA      SLACK     COST    RULE COST         ENDPOINT            POWER  
  --------- --------- --------- --------- --------- ------------------------- ---------
    0:00:04     390.2      0.00       0.0       0.0                              0.0271
    0:00:05     389.9      0.00       0.0       0.0                              0.0268
Loading db file '/usr/local/cmos28fdsoi_24/C28SOI_SC_12_CORE_LL@2.2@20131004.0/libs/C28SOI_SC_12_CORE_LL_ss28_0.80V_0.00V_0.00V_0.00V_125C.db'
Loading db file '/usr/local/cmos28fdsoi_24/C28SOI_SC_12_CORE_LL@2.2@20131004.0/libs/C28SOI_SC_12_CORE_LL_ss28_0.80V_0.00V_0.00V_0.00V_m40C.db'
Loading db file '/usr/local/cmos28fdsoi_24/C28SOI_SC_12_CORE_LL@2.2@20131004.0/libs/C28SOI_SC_12_CORE_LL_tt28_0.80V_0.00V_0.00V_0.00V_125C.db'
Loading db file '/usr/local/cmos28fdsoi_24/C28SOI_SC_12_CORE_LL@2.2@20131004.0/libs/C28SOI_SC_12_CORE_LL_tt28_0.80V_0.00V_0.00V_0.00V_25C.db'
Loading db file '/usr/local/cmos28fdsoi_24/C28SOI_SC_12_CORE_LL@2.2@20131004.0/libs/C28SOI_SC_12_CORE_LL_ff28_0.80V_0.00V_0.00V_0.00V_125C.db'
Loading db file '/usr/local/cmos28fdsoi_24/C28SOI_SC_12_CORE_LL@2.2@20131004.0/libs/C28SOI_SC_12_CORE_LL_ff28_0.80V_0.00V_0.00V_0.00V_m40C.db'


Note: Symbol # after min delay cost means estimated hold TNS across all active scenarios 


  Optimization Complete
  ---------------------
1
### ADDED FROM DSP_PD
#################################################################################
# Check for MV Violations
#################################################################################
###ANTcheck_mv_design > ${REPORTS_DIR}/${DCRM_MV_DRC_FINAL_SUMMARY_REPORT}
###ANTcheck_mv_design -verbose > ${REPORTS_DIR}/${DCRM_MV_DRC_FINAL_VERBOSE_REPORT}
### ADDED FROM DSP_PD
#################################################################################
# Write Out Final Design and Reports
#
#        .ddc:   Recommended binary format used for subsequent Design Compiler sessions
#    Milkyway:   Recommended binary format for IC Compiler
#        .v  :   Verilog netlist for ASCII flow (Formality, PrimeTime, VCS)
#       .spef:   Topographical mode parasitics for PrimeTime
#        .sdf:   SDF backannotated topographical mode timing for PrimeTime
#        .sdc:   SDC constraints for ASCII flow
#        .upf:   Supplemental UPF multivoltage information for mapped design
#
#################################################################################
# If this will be a sub-block in a hierarchical design, uniquify with block unique names
# to avoid name collisions when integrating the design at the top level
set_app_var uniquify_naming_style "${DESIGN_NAME}_%s_%d"
AntiLog2_%s_%d
uniquify -force
1
change_names -rules verilog -hierarchy
1
if (${synth_dft}) {
    #############################################################################
    # DFT Write out Test Protocols and Reports
    #############################################################################

    # write_scan_def adds SCANDEF information to the design database in memory, so 
    # this command must be performed prior to writing out the design database 
    # containing binary SCANDEF.

    write_scan_def -output ${DCRM_DFT_FINAL_SCANDEF_OUTPUT_FILE}
    check_scan_def > ${DCRM_DFT_FINAL_CHECK_SCAN_DEF_REPORT}
    write_test_model -format ctl -output ${DCRM_DFT_FINAL_CTL_OUTPUT_FILE}

    report_dft_signal > ${DCRM_DFT_FINAL_DFT_SIGNALS_REPORT}

    # DFT outputs for standard scan mode

    write_test_protocol -test_mode Internal_scan -output ${DCRM_DFT_FINAL_PROTOCOL_OUTPUT_FILE}
    current_test_mode Internal_scan
    report_scan_path > ${DCRM_DFT_FINAL_SCAN_PATH_REPORT}
    dft_drc
    dft_drc -verbose > ${DCRM_DFT_DRC_FINAL_REPORT}

    # DFT outputs for compressed scan mode
    # If you have defined you own test modes, change the name of the test mode from 
    # "ScanCompression_mode" to the one that you have specified using define_test_mode command.

    write_test_protocol -test_mode ScanCompression_mode -output ${DCRM_DFT_FINAL_SCAN_COMPR_PROTOCOL_OUTPUT_FILE}
    current_test_mode ScanCompression_mode
    report_scan_path > ${DCRM_DFT_FINAL_SCAN_COMPR_SCAN_PATH_REPORT}
    dft_drc 
    dft_drc -verbose > ${DCRM_DFT_DRC_FINAL_SCAN_COMPR_REPORT}
}
#################################################################################
# Write out Design
#################################################################################
if {(${DC_BLOCK_ABSTRACTION_DESIGNS} != "") || (${DC_BLOCK_ABSTRACTION_DESIGNS_TIO} != "")} {
create_block_abstraction
}
write -format verilog -hierarchy -output ${DCRM_FINAL_VERILOG_OUTPUT_FILE}
Writing verilog file '/home/sara/Documents/Eliseu/treco_saul/structural/dc/AntiLog2.mapped.v'.
1
write -format ddc     -hierarchy -output ${DCRM_FINAL_DDC_OUTPUT_FILE}
Writing ddc file '../structural/dc/AntiLog2.mapped.ddc'.
1
### ADDED FROM DSP_PD
###ANTsave_upf -supplemental ${POWER_DIR}/${DCRM_MV_FINAL_UPF_OUTPUT_FILE}
#save_upf -full_upf ${POWER_DIR}/${DCRM_MV_FINAL_FULL_UPF_OUTPUT_FILE}
### ADDED FROM DSP_PD
# Write and close SVF file and make it available for immediate use
set_svf -off
1
#################################################################################
# Write out Design Data
#################################################################################
if {[shell_is_in_topographical_mode]} {

  # Note: A secondary floorplan file ${DCRM_DCT_FINAL_FLOORPLAN_OUTPUT_FILE}.objects
  #       might also be written to capture physical-only objects in the design.
  #       This file should be read in before reading the main floorplan file.

  write_floorplan -all ${DCRM_DCT_FINAL_FLOORPLAN_OUTPUT_FILE}

  # Write parasitics data from Design Compiler Topographical placement for static timing analysis
  write_parasitics -output ${DCRM_DCT_FINAL_SPEF_OUTPUT_FILE}

  # Write SDF backannotation data from Design Compiler Topographical placement for static timing analysis
  write_sdf ${DCRM_DCT_FINAL_SDF_OUTPUT_FILE}

  # Do not write out net RC info into SDC
  set_app_var write_sdc_output_lumped_net_capacitance false
  set_app_var write_sdc_output_net_resistance false
}
write_sdc -nosplit ${DCRM_FINAL_SDC_OUTPUT_FILE}
1
# If SAIF is used, write out SAIF name mapping file for PrimeTime-PX
# saif_map -type ptpx -write_map ${RESULTS_DIR}/${DESIGN_NAME}.mapped.SAIF.namemap
### ADDED FROM DSP_PD
#################################################################################
# Generate MV Reports
#################################################################################
# Report all power domains in the design
###ANTreport_power_domain [get_power_domains * -hierarchical] > ${REPORTS_DIR}/${DCRM_MV_FINAL_POWER_DOMAIN_REPORT}
# Report the top level supply nets
###ANTreport_supply_net [get_supply_nets *] > ${REPORTS_DIR}/${DCRM_MV_FINAL_SUPPLY_NET_REPORT}
# Report the level shifters in the design
###ANTreport_level_shifter -domain [get_power_domains * -hierarchical] > ${REPORTS_DIR}/${DCRM_MV_FINAL_LEVEL_SHIFTER_REPORT}
# Report the isolation cells in the design
###ANTreport_isolation_cell -domain [get_power_domains * -hierarchical]  > ${REPORTS_DIR}/${DCRM_MV_FINAL_ISOLATION_CELL_REPORT}
# Report the retention registers in the design
###ANTreport_retention_cell -domain [get_power_domains * -hierarchical] > ${REPORTS_DIR}/${DCRM_MV_FINAL_RETENTION_CELL_REPORT}
# Report the power switches in the design
###ANTreport_power_switch [get_power_switches * -hierarchical] > ${REPORTS_DIR}/${DCRM_MV_FINAL_POWER_SWITCH_REPORT}
# Report the power state table
###ANTreport_pst > ${REPORTS_DIR}/${DCRM_MV_FINAL_PST_REPORT}
### ADDED FROM DSP_PD
#################################################################################
# Generate Final Reports
#################################################################################
report_qor > ${DCRM_FINAL_QOR_REPORT}
# Create a QoR snapshot of timing, physical, constraints, clock, power data, and routing on 
# active scenarios and stores it in the location  specified  by  the icc_snapshot_storage_location 
# variable. 
if {[shell_is_in_topographical_mode]} {
  set icc_snapshot_storage_location ${DCRM_DCT_FINAL_QOR_SNAPSHOT_FOLDER}
  create_qor_snapshot -name ${DCRM_DCT_FINAL_QOR_SNAPSHOT_REPORT} > ${DCRM_DCT_FINAL_QOR_SNAPSHOT_REPORT}
}
report_timing -transition_time -nets -attributes -nosplit > ${DCRM_FINAL_TIMING_REPORT}
if {[shell_is_in_topographical_mode]} {
  report_area -physical -nosplit > ${DCRM_FINAL_AREA_REPORT}
  report_area -hierarchy -physical -nosplit > ${DCRM_FINAL_AREA_HIERARCHY_REPORT}
} else {
  report_area -nosplit > ${DCRM_FINAL_AREA_REPORT}
  report_area -hierarchy -nosplit > ${DCRM_FINAL_AREA_HIERARCHY_REPORT}
}
# Uncomment the next line to report all the multibit registers and the banking ratio in the design
# report_multibit_banking -nosplit > ${DCRM_MULTIBIT_BANKING_REPORT}
if {[shell_is_in_topographical_mode]} {
  # report_congestion (topographical mode only) uses zroute for estimating and reporting 
  # routing related congestion which improves the congestion correlation with IC Compiler.
  # Design Compiler Topographical supports create_route_guide command to be consistent with IC
  # Compiler after topographical mode synthesis.
  # Those commands require a license for Design Compiler Graphical.

  report_congestion > ${DCRM_DCT_FINAL_CONGESTION_REPORT}

  # Use the following to generate and write out a congestion map from batch mode
  # This requires a GUI session to be temporarily opened and closed so a valid DISPLAY
  # must be set in your UNIX environment.

  if {[info exists env(DISPLAY)]} {
    gui_start

    # Create a layout window
    set MyLayout [gui_create_window -type LayoutWindow]

    # Build congestion map in case report_congestion was not previously run
    report_congestion -build_map

    # Display congestion map in layout window
    gui_show_map -map "Global Route Congestion" -show true

    # Zoom full to display complete floorplan
    gui_zoom -window [gui_get_current_window -view] -full

    # Write the congestion map out to an image file
    # You can specify the output image type with -format png | xpm | jpg | bmp

    # The following saves only the congestion map without the legends
    gui_write_window_image -format png -file ${DCRM_DCT_FINAL_CONGESTION_MAP_OUTPUT_FILE}

    # The following saves the entire congestion map layout window with the legends
    gui_write_window_image -window ${MyLayout} -format png -file ${DCRM_DCT_FINAL_CONGESTION_MAP_WINDOW_OUTPUT_FILE}

    gui_stop
  } else {
    puts "Information: The DISPLAY environment variable is not set. Congestion map generation has been skipped."
  }
}
#remove_license DC-Extension
# Use SAIF file for power analysis
# read_saif -auto_map_names -input ${DESIGN_NAME}.saif -instance < DESIGN_INSTANCE > -verbose
report_power -nosplit > ${DCRM_FINAL_POWER_REPORT}
report_power -nosplit -hierarchy > ${DCRM_FINAL_POWER_HIERARCHY_REPORT}
#report_clock_gating -nosplit > ${DCRM_FINAL_CLOCK_GATING_REPORT}
# Uncomment the next line if you include the -self_gating to the compile_ultra command
# to report the XOR Self Gating information.
# report_self_gating  -nosplit > ${DCRM_FINAL_SELF_GATING_REPORT}
# Uncomment the next line to reports the number, area, and  percentage  of cells 
# for each threshold voltage group in the design.
# report_threshold_voltage_group -nosplit > ${DCRM_THRESHOLD_VOLTAGE_GROUP_REPORT}
# Note: Do not write out the Milkyway design partitions for hierarchical flow
#       Milkyway design partitioning is done during hierarchical design planning 
#       in IC Compiler (ICC-HRM)
set final_runtime [clock seconds]
1530230165
set diff_runtime [expr $final_runtime - $initial_runtime] 
41
puts "Runtime: $diff_runtime seconds"
Runtime: 41 seconds
exit

Thank you...
